<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Exploring Azure, DevOps and Software Development</title>
  
  <subtitle>Welcome to Ricky&#39;s Blog</subtitle>
  <link href="https://clouddev.blog/atom.xml" rel="self"/>
  
  <link href="https://clouddev.blog/"/>
  <updated>2025-08-06T10:59:08.790Z</updated>
  <id>https://clouddev.blog/</id>
  
  <author>
    <name>Ricky Gummadi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Building Voice Agents with Azure Communication Services Voice Live API and Azure AI Agent Service</title>
    <link href="https://clouddev.blog/Azure/AI/Voice-Live-API/building-voice-agents-with-azure-communication-services-voice-live-api-and-azure-ai-agent-service/"/>
    <id>https://clouddev.blog/Azure/AI/Voice-Live-API/building-voice-agents-with-azure-communication-services-voice-live-api-and-azure-ai-agent-service/</id>
    <published>2025-07-07T12:00:00.000Z</published>
    <updated>2025-08-06T10:59:08.790Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Real-time Voice Agent Implementation</strong></p><p>This post walks through building a voice agent that connects traditional phone calls to Azure‚Äôs AI services. The system intercepts incoming calls via Azure Communication Services, streams audio in real-time to the Voice Live API, and processes conversations through pre-configured AI agents in Azure AI Studio. The implementation uses FastAPI for webhook handling, WebSocket connections for bidirectional audio streaming, and Azure Managed Identity for authentication (no API keys to manage). The architecture handles multiple concurrent calls on a single Python thread using asyncio.</p><p><strong>Implementation details:</strong> Audio resampling between 16kHz (ACS requirement) and 24kHz (Voice Live requirement), connection resilience for preview services, and production deployment considerations. <strong><a href="https://github.com/Ricky-G/azure-scenario-hub/tree/main/src/azure-communication-services-integrate-voice-live-api/python">Full source code and documentation available here</a></strong></p></blockquote><hr><p>Recently, I found myself co-leading an innovation project that pushed me into uncharted territory. The challenge? Developing a voice-based agentic solution with an ambitious goal - routing at least 25% of current contact center calls to AI voice agents. This was bleeding-edge stuff, with both the Azure Voice Live API and Azure AI Agent Service voice agents still in preview at the time of writing.</p><p>When you‚Äôre working with preview services, documentation is often sparse, and you quickly learn that reverse engineering network calls and maintaining close relationships with product teams becomes part of your daily routine. This blog post shares the practical lessons learned and the working solution we built to integrate these cutting-edge services.</p><h2 id="The-Innovation-Challenge"><a href="#The-Innovation-Challenge" class="headerlink" title="The Innovation Challenge"></a>The Innovation Challenge</h2><p>Building a voice agent system that could handle real customer interactions meant tackling several complex requirements:</p><ul><li>Real-time voice processing with minimal latency</li><li>Natural conversation flow without awkward pauses</li><li>Integration with existing contact center infrastructure</li><li>Scalability to handle multiple concurrent calls</li><li>Reliability for production use cases</li></ul><p>With both <a href="https://learn.microsoft.com/azure/ai-services/speech-service/voice-live">Azure Voice Live API</a> and <a href="https://learn.microsoft.com/azure/ai-foundry/agents/overview">Azure AI Voice Agent Service</a> in preview, we were essentially building on shifting sands. But that‚Äôs what innovation is about - pushing boundaries and finding solutions where documentation doesn‚Äôt yet exist.</p><h2 id="Understanding-the-Architecture"><a href="#Understanding-the-Architecture" class="headerlink" title="Understanding the Architecture"></a>Understanding the Architecture</h2><p>Our solution bridges Azure Communication Services (ACS) with Azure AI services to create an intelligent voice agent. Here‚Äôs how the pieces fit together:</p><pre class="mermaid">graph TB    subgraph "Phone Network"        PSTN[üìû PSTN Number<br/>+1-555-123-4567]    end        subgraph "Azure Communication Services"        ACS[üîó ACS Call Automation<br/>Event Grid Webhooks]        MEDIA[üéµ Media Streaming<br/>WebSocket Audio]    end        subgraph "Python FastAPI App"        API[üêç FastAPI Server<br/>localhost:49412]        WS[üîå WebSocket Handler<br/>Audio Processing]        HANDLER[‚ö° Media Handler<br/>Audio Resampling]    end        subgraph "Azure OpenAI"        VOICE[ü§ñ Voice Live API<br/>Agent Mode<br/>gpt-4o Realtime]        AGENT[üë§ Pre-configured Agent<br/>Azure AI Studio]    end        subgraph "Dev Infrastructure"        TUNNEL[üöá Dev Tunnel<br/>Public HTTPS Endpoint]    end        PSTN -->|Incoming Call| ACS    ACS -->|Webhook Events| TUNNEL    TUNNEL -->|HTTPS| API    ACS -->|WebSocket Audio| WS    WS -->|PCM 16kHz| HANDLER    HANDLER -->|PCM 24kHz| VOICE    VOICE -->|Agent Processing| AGENT    AGENT -->|AI Response| VOICE    VOICE -->|AI Response| HANDLER    HANDLER -->|PCM 16kHz| WS    WS -->|Audio Stream| ACS    ACS -->|Audio| PSTN        style PSTN fill:#ff9999    style ACS fill:#87CEEB    style API fill:#90EE90    style VOICE fill:#DDA0DD    style TUNNEL fill:#F0E68C</pre><h3 id="Core-Components"><a href="#Core-Components" class="headerlink" title="Core Components"></a>Core Components</h3><ol><li><strong>Azure Communication Services</strong>: Handles the telephony infrastructure, providing phone numbers and call routing</li><li><strong>Voice Live API</strong>: Enables real-time speech recognition and synthesis with WebRTC streaming</li><li><strong>Azure AI Agent Service</strong>: Provides the intelligence layer for understanding and responding to customer queries</li><li><strong>WebSocket Bridge</strong>: Our custom Python application that connects these services</li></ol><span id="more"></span><h3 id="The-Flow"><a href="#The-Flow" class="headerlink" title="The Flow"></a>The Flow</h3><p>When a customer calls, here‚Äôs what happens behind the scenes:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Customer Call ‚Üí ACS Phone Number ‚Üí Webhook to Our Service ‚Üí </span><br><span class="line">WebSocket Connection ‚Üí Voice Live API ‚Üî AI Agent Service ‚Üí </span><br><span class="line">Real-time Voice Response ‚Üí Customer</span><br></pre></td></tr></table></figure><h2 id="Setting-Up-the-Foundation"><a href="#Setting-Up-the-Foundation" class="headerlink" title="Setting Up the Foundation"></a>Setting Up the Foundation</h2><p>Let‚Äôs walk through the practical implementation. You can find the complete code in my <a href="https://github.com/Ricky-G/azure-scenario-hub/tree/main/src/azure-communication-services-integrate-voice-live-api/python">GitHub repository</a>.</p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>First, you‚Äôll need to set up several Azure services. Here‚Äôs what we discovered through trial and error:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Required Azure services</span></span><br><span class="line">- Azure Communication Services (with phone number provisioning)</span><br><span class="line">- Azure AI Services (Speech Service enabled)</span><br><span class="line">- Azure AI Agent Service (with voice capabilities)</span><br><span class="line">- Azure App Service or Container Instance (<span class="keyword">for</span> hosting)</span><br></pre></td></tr></table></figure><h3 id="Environment-Configuration"><a href="#Environment-Configuration" class="headerlink" title="Environment Configuration"></a>Environment Configuration</h3><p>One of the first challenges was figuring out all the required configuration parameters. Here‚Äôs what you‚Äôll need:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Essential environment variables (Using Azure Managed Identity - No API Keys!)</span></span><br><span class="line">ACS_CONNECTION_STRING = <span class="string">&quot;endpoint=https://your-acs.communication.azure.com/;accesskey=your-key&quot;</span></span><br><span class="line">AZURE_VOICE_LIVE_ENDPOINT = <span class="string">&quot;https://your-aoai.cognitiveservices.azure.com/&quot;</span></span><br><span class="line">AGENT_ID = <span class="string">&quot;your_agent_id_from_azure_ai_studio&quot;</span></span><br><span class="line">AGENT_PROJECT_NAME = <span class="string">&quot;your_project_name&quot;</span></span><br><span class="line">BASE_URL = <span class="string">&quot;https://your-tunnel-url.asse.devtunnels.ms&quot;</span>  <span class="comment"># Dev Tunnel URL</span></span><br></pre></td></tr></table></figure><h2 id="Building-the-WebSocket-Bridge"><a href="#Building-the-WebSocket-Bridge" class="headerlink" title="Building the WebSocket Bridge"></a>Building the WebSocket Bridge</h2><p>The heart of our solution is a Python application that acts as a bridge between ACS and the Voice Live API. This wasn‚Äôt documented anywhere - we had to figure it out by analyzing network traffic and experimenting.</p><h3 id="Handling-Incoming-Calls"><a href="#Handling-Incoming-Calls" class="headerlink" title="Handling Incoming Calls"></a>Handling Incoming Calls</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, WebSocket</span><br><span class="line"><span class="keyword">from</span> azure.communication.callautomation <span class="keyword">import</span> CallAutomationClient</span><br><span class="line"><span class="keyword">from</span> azure.identity <span class="keyword">import</span> DefaultAzureCredential</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line">call_automation_client = CallAutomationClient.from_connection_string(</span><br><span class="line">    ACS_CONNECTION_STRING</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/api/incomingCall&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">incoming_call</span>(<span class="params">request: <span class="built_in">dict</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Handle incoming call webhook from ACS&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Parse the incoming call context</span></span><br><span class="line">        incoming_call_context = request.get(<span class="string">&quot;incomingCallContext&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Answer the call</span></span><br><span class="line">        call_connection = call_automation_client.answer_call(</span><br><span class="line">            incoming_call_context=incoming_call_context,</span><br><span class="line">            callback_url=<span class="string">f&quot;<span class="subst">&#123;CALLBACK_URI&#125;</span>/api/callbacks/<span class="subst">&#123;call_id&#125;</span>&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Start WebSocket connection to Voice Live API</span></span><br><span class="line">        asyncio.create_task(</span><br><span class="line">            establish_voice_connection(call_connection.call_connection_id)</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Error handling incoming call: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br></pre></td></tr></table></figure><h3 id="Establishing-the-Voice-Connection"><a href="#Establishing-the-Voice-Connection" class="headerlink" title="Establishing the Voice Connection"></a>Establishing the Voice Connection</h3><p>This is where things got interesting. The Voice Live API uses WebRTC for real-time audio streaming, but the documentation was minimal. Here‚Äôs what we discovered:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">establish_voice_connection</span>(<span class="params">call_connection_id</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Establish WebSocket connection to Voice Live API using Azure Managed Identity&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Get access token using managed identity</span></span><br><span class="line">    <span class="keyword">from</span> azure.identity <span class="keyword">import</span> DefaultAzureCredential</span><br><span class="line">    credential = DefaultAzureCredential()</span><br><span class="line">    token = credential.get_token(<span class="string">&quot;https://cognitiveservices.azure.com/.default&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Construct the WebSocket URL for Voice Live API</span></span><br><span class="line">    ws_url = <span class="string">f&quot;wss://your-region.cognitiveservices.azure.com/openai/realtime?api-version=2024-10-01-preview&quot;</span></span><br><span class="line">    </span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;token.token&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OpenAI-Beta&quot;</span>: <span class="string">&quot;realtime=v1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(ws_url, extra_headers=headers) <span class="keyword">as</span> websocket:</span><br><span class="line">        <span class="comment"># Initialize session with Agent ID</span></span><br><span class="line">        <span class="keyword">await</span> websocket.send(json.dumps(&#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;session.update&quot;</span>,</span><br><span class="line">            <span class="string">&quot;session&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;agent&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;agent_id&quot;</span>: AGENT_ID,</span><br><span class="line">                    <span class="string">&quot;project_name&quot;</span>: AGENT_PROJECT_NAME</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Handle bidirectional audio streaming</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">            receive_audio_from_caller(websocket, call_connection_id),</span><br><span class="line">            send_audio_to_caller(websocket, call_connection_id)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h2 id="Integrating-with-Azure-AI-Agent-Service"><a href="#Integrating-with-Azure-AI-Agent-Service" class="headerlink" title="Integrating with Azure AI Agent Service"></a>Integrating with Azure AI Agent Service</h2><p>The AI Agent Service provides the intelligence for our voice agent. Here‚Äôs how we connected it:</p><h3 id="Processing-Voice-Input"><a href="#Processing-Voice-Input" class="headerlink" title="Processing Voice Input"></a>Processing Voice Input</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">process_voice_with_agent</span>(<span class="params">audio_data, session_id</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Send audio directly to Voice Live API in Agent Mode&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Using Azure Managed Identity - no API keys needed</span></span><br><span class="line">    <span class="keyword">from</span> azure.identity <span class="keyword">import</span> DefaultAzureCredential</span><br><span class="line">    credential = DefaultAzureCredential()</span><br><span class="line">    token = credential.get_token(<span class="string">&quot;https://cognitiveservices.azure.com/.default&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Send audio input event to Voice Live API</span></span><br><span class="line">    audio_event = &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;input_audio_buffer.append&quot;</span>,</span><br><span class="line">        <span class="string">&quot;audio&quot;</span>: base64.b64encode(audio_data).decode()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Voice Live API will handle agent processing automatically</span></span><br><span class="line">    <span class="comment"># when configured with agent_id in session.update</span></span><br><span class="line">    <span class="keyword">return</span> audio_event</span><br></pre></td></tr></table></figure><h2 id="Handling-Real-World-Challenges"><a href="#Handling-Real-World-Challenges" class="headerlink" title="Handling Real-World Challenges"></a>Handling Real-World Challenges</h2><p>Working with preview services meant encountering numerous undocumented behaviors. Here are some key challenges we solved:</p><h3 id="1-Audio-Format-Compatibility"><a href="#1-Audio-Format-Compatibility" class="headerlink" title="1. Audio Format Compatibility"></a>1. Audio Format Compatibility</h3><p>The Voice Live API expects specific audio formats. We discovered through trial and error:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Audio configuration that actually works (Voice Live API format)</span></span><br><span class="line">AUDIO_CONFIG = &#123;</span><br><span class="line">    <span class="string">&quot;format&quot;</span>: <span class="string">&quot;pcm16&quot;</span>,  <span class="comment"># 16-bit PCM for Voice Live API</span></span><br><span class="line">    <span class="string">&quot;sample_rate&quot;</span>: <span class="number">24000</span>,  <span class="comment"># 24kHz required by Voice Live</span></span><br><span class="line">    <span class="string">&quot;channels&quot;</span>: <span class="number">1</span>  <span class="comment"># Mono</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ACS requires 16kHz, so we need resampling</span></span><br><span class="line">ACS_AUDIO_CONFIG = &#123;</span><br><span class="line">    <span class="string">&quot;format&quot;</span>: <span class="string">&quot;pcm16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sample_rate&quot;</span>: <span class="number">16000</span>,  <span class="comment"># ACS requirement</span></span><br><span class="line">    <span class="string">&quot;channels&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Latency-Optimization"><a href="#2-Latency-Optimization" class="headerlink" title="2. Latency Optimization"></a>2. Latency Optimization</h3><p>To achieve natural conversation flow, we implemented several optimizations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Start voice synthesis before full response is ready</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">stream_synthesize_speech</span>(<span class="params">text_stream</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Synthesize speech in chunks for lower latency&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    buffer = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> chunk <span class="keyword">in</span> text_stream:</span><br><span class="line">        buffer += chunk</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Send to synthesis when we have a complete sentence</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(punct <span class="keyword">in</span> buffer <span class="keyword">for</span> punct <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;?&#x27;</span>]):</span><br><span class="line">            <span class="keyword">await</span> synthesize_and_send(buffer)</span><br><span class="line">            buffer = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-Connection-Resilience"><a href="#3-Connection-Resilience" class="headerlink" title="3. Connection Resilience"></a>3. Connection Resilience</h3><p>Preview services can be unstable. We added robust error handling:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">maintain_connection</span>(<span class="params">websocket, call_id</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Maintain WebSocket connection with automatic reconnection&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    retry_count = <span class="number">0</span></span><br><span class="line">    max_retries = <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> retry_count &lt; max_retries:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">await</span> websocket.ping()</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">30</span>)  <span class="comment"># Ping every 30 seconds</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> websockets.ConnectionClosed:</span><br><span class="line">            logger.warning(<span class="string">f&quot;Connection lost for call <span class="subst">&#123;call_id&#125;</span>&quot;</span>)</span><br><span class="line">            retry_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span> ** retry_count)  <span class="comment"># Exponential backoff</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Attempt reconnection</span></span><br><span class="line">            websocket = <span class="keyword">await</span> reconnect_websocket(call_id)</span><br></pre></td></tr></table></figure><h2 id="Deployment-Considerations"><a href="#Deployment-Considerations" class="headerlink" title="Deployment Considerations"></a>Deployment Considerations</h2><p>When deploying this solution, we learned several important lessons:</p><h3 id="Container-Deployment"><a href="#Container-Deployment" class="headerlink" title="Container Deployment"></a>Container Deployment</h3><p>We packaged our Python application as a container for easier deployment:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install system dependencies for audio processing</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    libopus0 \</span></span><br><span class="line"><span class="language-bash">    libopus-dev \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;start.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="Scaling-Considerations"><a href="#Scaling-Considerations" class="headerlink" title="Scaling Considerations"></a>Scaling Considerations</h3><p>For handling multiple concurrent calls:</p><ol><li><strong>Use Azure Container Instances</strong> or <strong>App Service</strong> with autoscaling</li><li><strong>Implement connection pooling</strong> for WebSocket connections</li><li><strong>Monitor memory usage</strong> - audio processing can be memory-intensive</li></ol><h2 id="Monitoring-and-Debugging"><a href="#Monitoring-and-Debugging" class="headerlink" title="Monitoring and Debugging"></a>Monitoring and Debugging</h2><p>Working with preview services means extensive logging is crucial:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> azure.monitor.opentelemetry <span class="keyword">import</span> configure_azure_monitor</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure Azure Monitor for production debugging</span></span><br><span class="line">configure_azure_monitor(</span><br><span class="line">    connection_string=APPLICATIONINSIGHTS_CONNECTION_STRING</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log all WebSocket events</span></span><br><span class="line">logging.getLogger(<span class="string">&#x27;websockets&#x27;</span>).setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure><h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><p>After weeks of development and close collaboration with Azure product teams, here are our key takeaways:</p><ol><li><strong>Preview Services Require Patience</strong>: Be prepared for undocumented features and changing APIs</li><li><strong>Network Analysis is Your Friend</strong>: Tools like Wireshark helped us understand the protocol</li><li><strong>Build in Resilience</strong>: Assume connections will drop and services will be intermittently unavailable</li><li><strong>Start Simple</strong>: Get basic voice working before adding complex AI interactions</li><li><strong>Monitor Everything</strong>: You‚Äôll need extensive logging to debug issues in production</li></ol><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><p>Ready to build your own voice agent? Check out the complete implementation in my <a href="https://github.com/Ricky-G/azure-scenario-hub/tree/main/src/azure-communication-services-integrate-voice-live-api/python">GitHub repository</a>. The repository includes:</p><ul><li>Complete Python application code</li><li>Deployment scripts and Docker configuration</li><li>Environment setup instructions</li><li>Troubleshooting guide</li></ul><p>Remember, innovation often means venturing into undocumented territory. Don‚Äôt be afraid to experiment, reverse-engineer, and collaborate with product teams. The future of voice-based AI agents is being written right now, and you can be part of it.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learn.microsoft.com/azure/ai-services/speech-service/voice-live">Azure Voice Live API Documentation</a></li><li><a href="https://learn.microsoft.com/azure/ai-foundry/agents/overview">Azure AI Agent Service Overview</a></li><li><a href="https://github.com/Ricky-G/azure-scenario-hub/tree/main/src/azure-communication-services-integrate-voice-live-api/python">Complete Code Repository</a></li><li><a href="https://learn.microsoft.com/azure/communication-services/">Azure Communication Services Documentation</a></li><li>Main image generated by <a href="https://openai.com/blog/dall-e/">DALL-E</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Real-time Voice Agent Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post walks through building a voice agent that connects traditional phone calls to Azure‚Äôs AI services. The system intercepts incoming calls via Azure Communication Services, streams audio in real-time to the Voice Live API, and processes conversations through pre-configured AI agents in Azure AI Studio. The implementation uses FastAPI for webhook handling, WebSocket connections for bidirectional audio streaming, and Azure Managed Identity for authentication (no API keys to manage). The architecture handles multiple concurrent calls on a single Python thread using asyncio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation details:&lt;/strong&gt; Audio resampling between 16kHz (ACS requirement) and 24kHz (Voice Live requirement), connection resilience for preview services, and production deployment considerations. &lt;strong&gt;&lt;a href=&quot;https://github.com/Ricky-G/azure-scenario-hub/tree/main/src/azure-communication-services-integrate-voice-live-api/python&quot;&gt;Full source code and documentation available here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Recently, I found myself co-leading an innovation project that pushed me into uncharted territory. The challenge? Developing a voice-based agentic solution with an ambitious goal - routing at least 25% of current contact center calls to AI voice agents. This was bleeding-edge stuff, with both the Azure Voice Live API and Azure AI Agent Service voice agents still in preview at the time of writing.&lt;/p&gt;
&lt;p&gt;When you‚Äôre working with preview services, documentation is often sparse, and you quickly learn that reverse engineering network calls and maintaining close relationships with product teams becomes part of your daily routine. This blog post shares the practical lessons learned and the working solution we built to integrate these cutting-edge services.&lt;/p&gt;
&lt;h2 id=&quot;The-Innovation-Challenge&quot;&gt;&lt;a href=&quot;#The-Innovation-Challenge&quot; class=&quot;headerlink&quot; title=&quot;The Innovation Challenge&quot;&gt;&lt;/a&gt;The Innovation Challenge&lt;/h2&gt;&lt;p&gt;Building a voice agent system that could handle real customer interactions meant tackling several complex requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Real-time voice processing with minimal latency&lt;/li&gt;
&lt;li&gt;Natural conversation flow without awkward pauses&lt;/li&gt;
&lt;li&gt;Integration with existing contact center infrastructure&lt;/li&gt;
&lt;li&gt;Scalability to handle multiple concurrent calls&lt;/li&gt;
&lt;li&gt;Reliability for production use cases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With both &lt;a href=&quot;https://learn.microsoft.com/azure/ai-services/speech-service/voice-live&quot;&gt;Azure Voice Live API&lt;/a&gt; and &lt;a href=&quot;https://learn.microsoft.com/azure/ai-foundry/agents/overview&quot;&gt;Azure AI Voice Agent Service&lt;/a&gt; in preview, we were essentially building on shifting sands. But that‚Äôs what innovation is about - pushing boundaries and finding solutions where documentation doesn‚Äôt yet exist.&lt;/p&gt;
&lt;h2 id=&quot;Understanding-the-Architecture&quot;&gt;&lt;a href=&quot;#Understanding-the-Architecture&quot; class=&quot;headerlink&quot; title=&quot;Understanding the Architecture&quot;&gt;&lt;/a&gt;Understanding the Architecture&lt;/h2&gt;&lt;p&gt;Our solution bridges Azure Communication Services (ACS) with Azure AI services to create an intelligent voice agent. Here‚Äôs how the pieces fit together:&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;graph TB
    subgraph &quot;Phone Network&quot;
        PSTN[üìû PSTN Number&lt;br/&gt;+1-555-123-4567]
    end
    
    subgraph &quot;Azure Communication Services&quot;
        ACS[üîó ACS Call Automation&lt;br/&gt;Event Grid Webhooks]
        MEDIA[üéµ Media Streaming&lt;br/&gt;WebSocket Audio]
    end
    
    subgraph &quot;Python FastAPI App&quot;
        API[üêç FastAPI Server&lt;br/&gt;localhost:49412]
        WS[üîå WebSocket Handler&lt;br/&gt;Audio Processing]
        HANDLER[‚ö° Media Handler&lt;br/&gt;Audio Resampling]
    end
    
    subgraph &quot;Azure OpenAI&quot;
        VOICE[ü§ñ Voice Live API&lt;br/&gt;Agent Mode&lt;br/&gt;gpt-4o Realtime]
        AGENT[üë§ Pre-configured Agent&lt;br/&gt;Azure AI Studio]
    end
    
    subgraph &quot;Dev Infrastructure&quot;
        TUNNEL[üöá Dev Tunnel&lt;br/&gt;Public HTTPS Endpoint]
    end
    
    PSTN --&gt;|Incoming Call| ACS
    ACS --&gt;|Webhook Events| TUNNEL
    TUNNEL --&gt;|HTTPS| API
    ACS --&gt;|WebSocket Audio| WS
    WS --&gt;|PCM 16kHz| HANDLER
    HANDLER --&gt;|PCM 24kHz| VOICE
    VOICE --&gt;|Agent Processing| AGENT
    AGENT --&gt;|AI Response| VOICE
    VOICE --&gt;|AI Response| HANDLER
    HANDLER --&gt;|PCM 16kHz| WS
    WS --&gt;|Audio Stream| ACS
    ACS --&gt;|Audio| PSTN
    
    style PSTN fill:#ff9999
    style ACS fill:#87CEEB
    style API fill:#90EE90
    style VOICE fill:#DDA0DD
    style TUNNEL fill:#F0E68C&lt;/pre&gt;

&lt;h3 id=&quot;Core-Components&quot;&gt;&lt;a href=&quot;#Core-Components&quot; class=&quot;headerlink&quot; title=&quot;Core Components&quot;&gt;&lt;/a&gt;Core Components&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Azure Communication Services&lt;/strong&gt;: Handles the telephony infrastructure, providing phone numbers and call routing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Voice Live API&lt;/strong&gt;: Enables real-time speech recognition and synthesis with WebRTC streaming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure AI Agent Service&lt;/strong&gt;: Provides the intelligence layer for understanding and responding to customer queries&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket Bridge&lt;/strong&gt;: Our custom Python application that connects these services&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="AI" scheme="https://clouddev.blog/categories/Azure/AI/"/>
    
    <category term="Voice Live API" scheme="https://clouddev.blog/categories/Azure/AI/Voice-Live-API/"/>
    
    
    <category term="Azure Communication Services" scheme="https://clouddev.blog/tags/Azure-Communication-Services/"/>
    
    <category term="Azure AI Agent Service" scheme="https://clouddev.blog/tags/Azure-AI-Agent-Service/"/>
    
    <category term="Voice Live API" scheme="https://clouddev.blog/tags/Voice-Live-API/"/>
    
    <category term="AI Voice Agents" scheme="https://clouddev.blog/tags/AI-Voice-Agents/"/>
    
    <category term="Contact Center" scheme="https://clouddev.blog/tags/Contact-Center/"/>
    
    <category term="Python" scheme="https://clouddev.blog/tags/Python/"/>
    
    <category term="WebRTC" scheme="https://clouddev.blog/tags/WebRTC/"/>
    
  </entry>
  
  <entry>
    <title>Getting TFVC Repository Structure via Azure DevOps Server API</title>
    <link href="https://clouddev.blog/Azure-DevOps/Azure-DevOps-API/getting-tfvc-repository-structure-via-azure-devops-server-api/"/>
    <id>https://clouddev.blog/Azure-DevOps/Azure-DevOps-API/getting-tfvc-repository-structure-via-azure-devops-server-api/</id>
    <published>2025-06-17T12:00:00.000Z</published>
    <updated>2025-08-06T11:03:44.566Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Retrieving TFVC Repository Structure via REST API</strong></p><p>This post demonstrates how to programmatically enumerate TFVC repository folders using Azure DevOps Server REST APIs. Unlike Git repositories, TFVC follows a one-repository-per-project model with hierarchical folder structures starting at <code>$/ProjectName</code>. The solution uses the TFVC Items API with specific parameters: <code>scopePath=$/ProjectName</code> to target the project root, and <code>recursionLevel=OneLevel</code> to retrieve immediate children. The implementation handles authentication via Personal Access Tokens, filters results to show only folders (excluding the root), and includes error handling for projects without TFVC repositories or insufficient permissions.</p><p><strong>Key technical details:</strong> PowerShell script implementation, proper API parameter usage, authentication setup, and handling edge cases like empty repositories and access permissions. <strong><a href="https://github.com/Ricky-G/script-library/blob/main/TFS-TFVC-Scripts-README.md">Complete PowerShell script and utilities available here</a></strong></p></blockquote><hr><p>Recently, I was asked an interesting question by a developer who was struggling with Azure DevOps Server APIs around fetching repository metadata for legacy TFVC structures as part of a GitHub migration from ADO Server. This was a nice little problem to solve because, let‚Äôs be honest, we don‚Äôt really deal with these legacy TFVC repositories much anymore. Most teams have migrated to Git, and the documentation around TFVC API interactions has become somewhat sparse over the years.</p><p>The challenge was straightforward but frustrating: they could retrieve project information just fine, but getting the actual TFVC folder structure within each project? That‚Äôs where things got tricky. After doing a bit of digging through the API documentation and testing different approaches, I‚Äôm happy to say that yes, it is absolutely possible to enumerate all TFVC repositories and their folder structures programmatically.</p><p>This blog post shares the solution I put together - a practical approach to retrieve TFVC repository structure using the Azure DevOps Server REST APIs. If you‚Äôre working with legacy TFVC repositories and need to interact with them programmatically, this one‚Äôs for you.</p><h2 id="The-Challenge-Understanding-TFVC-API-Limitations"><a href="#The-Challenge-Understanding-TFVC-API-Limitations" class="headerlink" title="The Challenge: Understanding TFVC API Limitations"></a>The Challenge: Understanding TFVC API Limitations</h2><p>Unlike Git repositories where each project can contain multiple repos, TFVC follows a different model where each project contains exactly one TFVC repository. This fundamental difference affects how you interact with the API and retrieve repository information.</p><p>The main challenge developers face is distinguishing between project metadata and actual TFVC repository structure. When calling the standard Projects API, you receive project information but not the folder structure within the TFVC repository itself.</p><span id="more"></span><h2 id="Common-Misconceptions-About-TFVC-APIs"><a href="#Common-Misconceptions-About-TFVC-APIs" class="headerlink" title="Common Misconceptions About TFVC APIs"></a>Common Misconceptions About TFVC APIs</h2><p>Many developers make the mistake of thinking that the Projects API or the Items API with default parameters will return the TFVC folder structure. Here‚Äôs what typically happens:</p><p><strong>What doesn‚Äôt work:</strong></p><ul><li>Using only the Projects API - returns project metadata, not TFVC structure</li><li>Calling Items API without proper <code>scopePath</code> parameter - returns all items across the organization</li><li>Using the Branches API - doesn‚Äôt apply to TFVC repositories the same way as Git</li></ul><p><strong>The root cause:</strong> The API requires specific parameters to traverse the TFVC hierarchy correctly.</p><h2 id="Understanding-TFVC-Repository-Structure"><a href="#Understanding-TFVC-Repository-Structure" class="headerlink" title="Understanding TFVC Repository Structure"></a>Understanding TFVC Repository Structure</h2><p>In TFVC, the repository structure follows this pattern:</p><ul><li>Each project has one TFVC repository</li><li>The repository root is always <code>$/ProjectName</code></li><li>Folders are organized hierarchically under this root</li><li>You need to specify recursion levels to control how deep the API traverses</li></ul><h2 id="The-Solution-Targeted-API-Calls-with-Proper-Parameters"><a href="#The-Solution-Targeted-API-Calls-with-Proper-Parameters" class="headerlink" title="The Solution: Targeted API Calls with Proper Parameters"></a>The Solution: Targeted API Calls with Proper Parameters</h2><p>The key to retrieving TFVC folder structure lies in using the correct combination of API endpoints and parameters. Here‚Äôs the step-by-step approach:</p><h3 id="Step-1-Get-All-Projects"><a href="#Step-1-Get-All-Projects" class="headerlink" title="Step 1: Get All Projects"></a>Step 1: Get All Projects</h3><p>First, retrieve all projects in your Azure DevOps Server instance using the Projects API.</p><h3 id="Step-2-Query-TFVC-Items-for-Each-Project"><a href="#Step-2-Query-TFVC-Items-for-Each-Project" class="headerlink" title="Step 2: Query TFVC Items for Each Project"></a>Step 2: Query TFVC Items for Each Project</h3><p>For each project, call the TFVC Items API with these specific parameters:</p><ul><li><code>scopePath=$/ProjectName</code> - Sets the starting point to the project‚Äôs TFVC root</li><li><code>recursionLevel=OneLevel</code> - Returns immediate children only (not recursive)</li><li>Filter results to show only folders, excluding the root itself</li></ul><h2 id="PowerShell-Script-Implementation"><a href="#PowerShell-Script-Implementation" class="headerlink" title="PowerShell Script Implementation"></a>PowerShell Script Implementation</h2><p>Here‚Äôs a complete PowerShell script that implements this solution. You can find the full script and additional TFVC utilities in my <a href="https://github.com/Ricky-G/script-library/blob/main/TFS-TFVC-Scripts-README.md">TFS&#x2F;TFVC Scripts collection</a>:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Azure DevOps Server configuration</span></span><br><span class="line"><span class="variable">$tfsUrl</span> = <span class="string">&quot;https://mytfs.com&quot;</span></span><br><span class="line"><span class="variable">$PAT</span> = <span class="string">&quot;your-personal-access-token&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create authentication headers</span></span><br><span class="line"><span class="variable">$headers</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    Authorization = <span class="string">&quot;Basic &quot;</span> + [<span class="type">Convert</span>]::ToBase64String([<span class="type">Text.Encoding</span>]::ASCII.GetBytes(<span class="string">&quot;:<span class="variable">$PAT</span>&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get all projects</span></span><br><span class="line"><span class="variable">$projects</span> = <span class="built_in">Invoke-RestMethod</span> <span class="literal">-Uri</span> <span class="string">&quot;<span class="variable">$tfsUrl</span>/DefaultCollection/_apis/projects?api-version=5.0&quot;</span> <span class="literal">-Headers</span> <span class="variable">$headers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$project</span> <span class="keyword">in</span> <span class="variable">$projects</span>.value) &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;Project: <span class="variable">$</span>(<span class="variable">$project</span>.name)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Construct TFVC path for this project</span></span><br><span class="line">    <span class="variable">$tfvcPath</span> = <span class="string">&quot;`$/<span class="variable">$</span>(<span class="variable">$project</span>.name)&quot;</span></span><br><span class="line">    <span class="variable">$itemsUrl</span> = <span class="string">&quot;<span class="variable">$tfsUrl</span>/DefaultCollection/<span class="variable">$</span>(<span class="variable">$project</span>.id)/_apis/tfvc/items?scopePath=<span class="variable">$tfvcPath</span>&amp;recursionLevel=OneLevel&amp;api-version=5.0&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment"># Get TFVC items for this project</span></span><br><span class="line">        <span class="variable">$items</span> = <span class="built_in">Invoke-RestMethod</span> <span class="literal">-Uri</span> <span class="variable">$itemsUrl</span> <span class="literal">-Headers</span> <span class="variable">$headers</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Filter to get only folders (excluding the root itself)</span></span><br><span class="line">        <span class="variable">$folders</span> = <span class="variable">$items</span>.value | <span class="built_in">Where-Object</span> &#123;</span><br><span class="line">            <span class="variable">$_</span>.isFolder <span class="operator">-eq</span> <span class="variable">$true</span> <span class="operator">-and</span></span><br><span class="line">            <span class="variable">$_</span>.path <span class="operator">-ne</span> <span class="variable">$tfvcPath</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$folder</span> <span class="keyword">in</span> <span class="variable">$folders</span>) &#123;</span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;  - <span class="variable">$</span>(<span class="variable">$folder</span>.path)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$folders</span>.Count <span class="operator">-eq</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;  No top-level folders found&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="string">&quot;  No TFVC content or access denied&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Script-Configuration-and-Security"><a href="#Script-Configuration-and-Security" class="headerlink" title="Script Configuration and Security"></a>Script Configuration and Security</h2><h3 id="Personal-Access-Token-Setup"><a href="#Personal-Access-Token-Setup" class="headerlink" title="Personal Access Token Setup"></a>Personal Access Token Setup</h3><p>To use this script, you‚Äôll need to create a Personal Access Token (PAT) with appropriate permissions:</p><ol><li>Navigate to your Azure DevOps Server user settings</li><li>Create a new Personal Access Token</li><li>Grant <strong>Code (read)</strong> permissions at minimum</li><li>Copy the token and replace <code>your-personal-access-token</code> in the script</li></ol><h3 id="URL-Configuration"><a href="#URL-Configuration" class="headerlink" title="URL Configuration"></a>URL Configuration</h3><p>Replace <code>https://mytfs.com</code> with your actual Azure DevOps Server URL. The format should be:</p><ul><li>On-premises TFS: <code>https://your-tfs-server</code></li><li>Azure DevOps Server: <code>https://your-server-name</code></li></ul><h2 id="Understanding-the-API-Response"><a href="#Understanding-the-API-Response" class="headerlink" title="Understanding the API Response"></a>Understanding the API Response</h2><p>The TFVC Items API returns objects with these key properties:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$/ProjectName/FolderName&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isFolder&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">12345</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Important properties:</strong></p><ul><li><code>path</code>: The full TFVC path to the item</li><li><code>isFolder</code>: Boolean indicating if the item is a folder</li><li><code>version</code>: The changeset number when this item was last modified</li></ul><h2 id="Error-Handling-and-Edge-Cases"><a href="#Error-Handling-and-Edge-Cases" class="headerlink" title="Error Handling and Edge Cases"></a>Error Handling and Edge Cases</h2><p>The script includes error handling for common scenarios:</p><p><strong>No TFVC Repository:</strong> Some projects might not have TFVC repositories initialized. The script catches these cases and displays an appropriate message.</p><p><strong>Access Permissions:</strong> If your PAT doesn‚Äôt have sufficient permissions for a project, the API call will fail gracefully.</p><p><strong>Empty Repositories:</strong> Projects with TFVC repositories but no folders will display ‚ÄúNo top-level folders found.‚Äù</p><h2 id="Advanced-Customizations"><a href="#Advanced-Customizations" class="headerlink" title="Advanced Customizations"></a>Advanced Customizations</h2><h3 id="Filtering-Specific-Projects"><a href="#Filtering-Specific-Projects" class="headerlink" title="Filtering Specific Projects"></a>Filtering Specific Projects</h3><p>To target specific projects, you can filter the projects array:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$projects</span> = <span class="variable">$projects</span>.value | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.name <span class="operator">-like</span> <span class="string">&quot;*YourFilter*&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="Deeper-Recursion"><a href="#Deeper-Recursion" class="headerlink" title="Deeper Recursion"></a>Deeper Recursion</h3><p>To get more than just top-level folders, change the <code>recursionLevel</code> parameter:</p><ul><li><code>OneLevel</code>: Immediate children only</li><li><code>Full</code>: Complete hierarchy (use with caution on large repositories)</li></ul><h3 id="Output-Formatting"><a href="#Output-Formatting" class="headerlink" title="Output Formatting"></a>Output Formatting</h3><p>You can modify the output format to suit your needs:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Export to CSV</span></span><br><span class="line"><span class="variable">$results</span> = <span class="selector-tag">@</span>()</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$folder</span> <span class="keyword">in</span> <span class="variable">$folders</span>) &#123;</span><br><span class="line">    <span class="variable">$results</span> += [<span class="type">PSCustomObject</span>]<span class="selector-tag">@</span>&#123;</span><br><span class="line">        Project = <span class="variable">$project</span>.name</span><br><span class="line">        FolderPath = <span class="variable">$folder</span>.path</span><br><span class="line">        LastModified = <span class="variable">$folder</span>.version</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$results</span> | <span class="built_in">Export-Csv</span> <span class="literal">-Path</span> <span class="string">&quot;tfvc-folders.csv&quot;</span> <span class="literal">-NoTypeInformation</span></span><br></pre></td></tr></table></figure><h2 id="Performance-Considerations"><a href="#Performance-Considerations" class="headerlink" title="Performance Considerations"></a>Performance Considerations</h2><p>For organizations with many projects, consider implementing:</p><p><strong>Parallel Processing:</strong> Use PowerShell jobs or runspaces to query multiple projects simultaneously.</p><p><strong>Pagination:</strong> For large result sets, implement pagination using the <code>$skip</code> and <code>$top</code> parameters.</p><p><strong>Caching:</strong> Store results locally if you need to run the script frequently.</p><h2 id="Troubleshooting-Common-Issues"><a href="#Troubleshooting-Common-Issues" class="headerlink" title="Troubleshooting Common Issues"></a>Troubleshooting Common Issues</h2><h3 id="Authentication-Failures"><a href="#Authentication-Failures" class="headerlink" title="Authentication Failures"></a>Authentication Failures</h3><ul><li>Verify your PAT is not expired</li><li>Ensure the PAT has sufficient permissions</li><li>Check that your TFS URL is correct and accessible</li></ul><h3 id="Empty-Results"><a href="#Empty-Results" class="headerlink" title="Empty Results"></a>Empty Results</h3><ul><li>Confirm the project actually uses TFVC (not Git)</li><li>Verify you have read permissions on the project</li><li>Check if the TFVC repository has been initialized</li></ul><h3 id="API-Version-Compatibility"><a href="#API-Version-Compatibility" class="headerlink" title="API Version Compatibility"></a>API Version Compatibility</h3><p>The script uses API version 5.0, which is compatible with:</p><ul><li>Team Foundation Server 2019 and later</li><li>Azure DevOps Server 2019 and later</li></ul><p>For older TFS versions, you might need to use API version 1.0 or 2.0.</p><h2 id="Best-Practices-for-TFVC-API-Integration"><a href="#Best-Practices-for-TFVC-API-Integration" class="headerlink" title="Best Practices for TFVC API Integration"></a>Best Practices for TFVC API Integration</h2><p><strong>Use Specific API Versions:</strong> Always specify the API version to ensure consistent behavior across different server versions.</p><p><strong>Implement Proper Error Handling:</strong> TFVC repositories can have various states, and not all projects may have TFVC initialized.</p><p><strong>Respect Rate Limits:</strong> While on-premises servers typically don‚Äôt have strict rate limits, implement appropriate delays if querying large numbers of projects.</p><p><strong>Secure Credential Management:</strong> Store PATs securely and rotate them regularly according to your organization‚Äôs security policies.</p><h2 id="Integration-with-CI-x2F-CD-Pipelines"><a href="#Integration-with-CI-x2F-CD-Pipelines" class="headerlink" title="Integration with CI&#x2F;CD Pipelines"></a>Integration with CI&#x2F;CD Pipelines</h2><p>This script can be integrated into DevOps workflows for:</p><p><strong>Repository Auditing:</strong> Generate reports of TFVC repository structures across your organization.</p><p><strong>Migration Planning:</strong> Identify repository structures before migrating from TFVC to Git.</p><p><strong>Compliance Reporting:</strong> Document your source control structure for regulatory requirements.</p><h2 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><p>Working with TFVC repositories via REST API requires understanding the fundamental differences between TFVC and Git repository models. The key insights are:</p><ul><li>TFVC has one repository per project, not multiple like Git</li><li>Use <code>scopePath</code> and <code>recursionLevel</code> parameters to control API traversal</li><li>Always filter results to distinguish between folders and the root item</li><li>Implement proper error handling for projects without TFVC repositories</li></ul><p>This solution provides a robust foundation for any TFVC repository management tasks you might need to automate. Whether you‚Äôre auditing your source control landscape, planning migrations, or building custom tooling, this approach will help you successfully retrieve TFVC repository structure data.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/tfvc/items?view=azure-devops-rest-5.0">Azure DevOps REST API - TFVC Items</a></li><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects?view=azure-devops-rest-5.0">Azure DevOps REST API - Projects</a></li><li><a href="https://gist.github.com/Ricky-G/c342eb7be8918209f1e6df98e04779bc">Complete PowerShell script on GitHub Gist</a></li><li><a href="https://github.com/Ricky-G/script-library/blob/main/TFS-TFVC-Scripts-README.md">TFS&#x2F;TFVC Scripts Collection - Additional utilities and examples</a></li><li>Main image generated by <a href="https://openai.com/blog/dall-e/">DALL-E</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Retrieving TFVC Repository Structure via REST API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post demonstrates how to programmatically enumerate TFVC repository folders using Azure DevOps Server REST APIs. Unlike Git repositories, TFVC follows a one-repository-per-project model with hierarchical folder structures starting at &lt;code&gt;$/ProjectName&lt;/code&gt;. The solution uses the TFVC Items API with specific parameters: &lt;code&gt;scopePath=$/ProjectName&lt;/code&gt; to target the project root, and &lt;code&gt;recursionLevel=OneLevel&lt;/code&gt; to retrieve immediate children. The implementation handles authentication via Personal Access Tokens, filters results to show only folders (excluding the root), and includes error handling for projects without TFVC repositories or insufficient permissions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key technical details:&lt;/strong&gt; PowerShell script implementation, proper API parameter usage, authentication setup, and handling edge cases like empty repositories and access permissions. &lt;strong&gt;&lt;a href=&quot;https://github.com/Ricky-G/script-library/blob/main/TFS-TFVC-Scripts-README.md&quot;&gt;Complete PowerShell script and utilities available here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Recently, I was asked an interesting question by a developer who was struggling with Azure DevOps Server APIs around fetching repository metadata for legacy TFVC structures as part of a GitHub migration from ADO Server. This was a nice little problem to solve because, let‚Äôs be honest, we don‚Äôt really deal with these legacy TFVC repositories much anymore. Most teams have migrated to Git, and the documentation around TFVC API interactions has become somewhat sparse over the years.&lt;/p&gt;
&lt;p&gt;The challenge was straightforward but frustrating: they could retrieve project information just fine, but getting the actual TFVC folder structure within each project? That‚Äôs where things got tricky. After doing a bit of digging through the API documentation and testing different approaches, I‚Äôm happy to say that yes, it is absolutely possible to enumerate all TFVC repositories and their folder structures programmatically.&lt;/p&gt;
&lt;p&gt;This blog post shares the solution I put together - a practical approach to retrieve TFVC repository structure using the Azure DevOps Server REST APIs. If you‚Äôre working with legacy TFVC repositories and need to interact with them programmatically, this one‚Äôs for you.&lt;/p&gt;
&lt;h2 id=&quot;The-Challenge-Understanding-TFVC-API-Limitations&quot;&gt;&lt;a href=&quot;#The-Challenge-Understanding-TFVC-API-Limitations&quot; class=&quot;headerlink&quot; title=&quot;The Challenge: Understanding TFVC API Limitations&quot;&gt;&lt;/a&gt;The Challenge: Understanding TFVC API Limitations&lt;/h2&gt;&lt;p&gt;Unlike Git repositories where each project can contain multiple repos, TFVC follows a different model where each project contains exactly one TFVC repository. This fundamental difference affects how you interact with the API and retrieve repository information.&lt;/p&gt;
&lt;p&gt;The main challenge developers face is distinguishing between project metadata and actual TFVC repository structure. When calling the standard Projects API, you receive project information but not the folder structure within the TFVC repository itself.&lt;/p&gt;</summary>
    
    
    
    <category term="Azure DevOps" scheme="https://clouddev.blog/categories/Azure-DevOps/"/>
    
    <category term="Azure DevOps API" scheme="https://clouddev.blog/categories/Azure-DevOps/Azure-DevOps-API/"/>
    
    
    <category term="Azure DevOps" scheme="https://clouddev.blog/tags/Azure-DevOps/"/>
    
    <category term="TFVC" scheme="https://clouddev.blog/tags/TFVC/"/>
    
    <category term="REST API" scheme="https://clouddev.blog/tags/REST-API/"/>
    
    <category term="PowerShell" scheme="https://clouddev.blog/tags/PowerShell/"/>
    
    <category term="TFS" scheme="https://clouddev.blog/tags/TFS/"/>
    
  </entry>
  
  <entry>
    <title>How We United 8 Developers Across Restricted Environments Using Azure VMs and Dev Containers</title>
    <link href="https://clouddev.blog/Azure/DevOps/Development/how-we-united-8-developers-across-restricted-environments-using-azure-vms-and-dev-containers/"/>
    <id>https://clouddev.blog/Azure/DevOps/Development/how-we-united-8-developers-across-restricted-environments-using-azure-vms-and-dev-containers/</id>
    <published>2025-04-30T12:00:00.000Z</published>
    <updated>2025-08-06T11:10:49.626Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Distributed Development with Azure VMs and Dev Containers</strong></p><p>This post details solving a distributed development challenge where 8 developers from different organizations needed to collaborate on an AutoGen AI project - 4 from restricted corporate environments unable to install development tools, and 4 external developers without access to client systems. The solution uses a shared Azure VM (Standard D8s v3) with individual user accounts, certificate-based SSH authentication, and VS Code Remote Development connected to a shared Dev Container environment. The architecture eliminates ‚Äúworks on my machine‚Äù issues by providing consistent development environments, shared resources (datasets, models, configs), and enables real-time collaboration.</p><p><strong>Implementation highlights:</strong> Automated user provisioning scripts, VS Code Remote-SSH configuration, comprehensive devcontainer.json with pre-installed Python 3.12&#x2F;AutoGen&#x2F;Azure CLI, shared directory structures, and security hardening with fail2ban and UFW. <strong><a href="https://github.com/Ricky-G/script-library">Development environment setup scripts and configurations documented here</a></strong></p></blockquote><hr><h2 id="Introduction-When-Traditional-Solutions-Hit-a-Wall"><a href="#Introduction-When-Traditional-Solutions-Hit-a-Wall" class="headerlink" title="Introduction: When Traditional Solutions Hit a Wall"></a>Introduction: When Traditional Solutions Hit a Wall</h2><p>Last month, I found myself facing a challenge that I‚Äôm sure many of you have encountered: How do you enable seamless collaboration for a development team when half of them work in a locked-down environment where they can‚Äôt install any development tools, and the other half can‚Äôt access the client‚Äôs systems?</p><p>Our team of eight developers was tasked with building a proof-of-concept (PoC) for an AI-powered agentic system using Microsoft‚Äôs AutoGen framework. Here‚Äôs the kicker: this was a 3-week PoC sprint bringing together two teams from different organizations who had never worked together before. We needed a collaborative environment that could be spun up quickly, require minimal setup effort, and allow everyone to hit the ground running from day one.</p><p>The project requirements were complex enough, but the real challenge? Four developers worked from a highly restricted corporate environment where installing Python, VS Code, or any development tools was strictly prohibited. The remaining four worked from our offices but couldn‚Äôt access the client‚Äôs internal systems directly.</p><p>We tried the usual approaches:</p><ul><li><strong>RDP connections</strong>: Blocked by security policies</li><li><strong>VPN access</strong>: Denied due to compliance requirements</li><li><strong>Local development with file sharing</strong>: Immediate sync issues and ‚Äúworks on my machine‚Äù problems</li><li><strong>Cloud IDEs</strong>: Didn‚Äôt meet the client‚Äôs security requirements</li></ul><p>Just when we thought we‚Äôd have to resort to the dreaded ‚Äúdevelop locally and pray it works in production‚Äù approach, we discovered a solution that not only solved our immediate problem but revolutionized how we approach distributed development.</p><h2 id="The-Architecture-That-Worked-For-Us"><a href="#The-Architecture-That-Worked-For-Us" class="headerlink" title="The Architecture That Worked For Us"></a>The Architecture That Worked For Us</h2><p>Here‚Äôs a visual representation of what we built, everyone had to work on their personal (non-corporate) laptops for this to work.</p><pre class="mermaid">flowchart TD    A["ÔøΩ 8 Developers on Personal Laptops<br/>4 Restricted + 4 External Teams"]        B["ÔøΩ SSH + VS Code Remote Connection<br/>Certificate-based Authentication"]        C["‚òÅÔ∏è Azure VM (Standard D8s v3)<br/>8 vCPUs ‚Ä¢ 32GB RAM ‚Ä¢ Ubuntu 22.04"]        D["üë§ Individual User Accounts<br/>user1, user2, user3... user8"]        E["üê≥ Shared Dev Container<br/>Python 3.12 + AutoGen + Azure CLI<br/>All Dependencies Pre-installed"]        F["üìÇ Shared Development Resources<br/>‚Ä¢ Project Repository<br/>‚Ä¢ Datasets & Models<br/>‚Ä¢ Configuration Files"]        G["‚úÖ Results Achieved<br/>94% Faster Onboarding<br/>$400/month vs $16k laptops<br/>Enhanced Security"]        A --> B    B --> C    C --> D    D --> E    E --> F    F --> G        style A fill:#e3f2fd,stroke:#1976d2,stroke-width:3px,color:#000    style B fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px,color:#000    style C fill:#e1f5fe,stroke:#0277bd,stroke-width:3px,color:#000    style D fill:#fff3e0,stroke:#f57c00,stroke-width:3px,color:#000    style E fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px,color:#000    style F fill:#fff3e0,stroke:#f57c00,stroke-width:3px,color:#000    style G fill:#e8f5e8,stroke:#388e3c,stroke-width:3px,color:#000</pre><p>Lets check out how this was built and setup‚Ä¶</p><span id="more"></span><h2 id="The-Deep-Dive-How-We-Built-It"><a href="#The-Deep-Dive-How-We-Built-It" class="headerlink" title="The Deep Dive: How We Built It"></a>The Deep Dive: How We Built It</h2><h3 id="Step-1-Provisioning-the-Azure-VM"><a href="#Step-1-Provisioning-the-Azure-VM" class="headerlink" title="Step 1: Provisioning the Azure VM"></a>Step 1: Provisioning the Azure VM</h3><p>We started with a Linux VM in Azure. After some testing, we settled on a Standard D8s v3 instance (8 vCPUs, 32 GB RAM) which provided enough resources for all eight developers to work simultaneously without performance issues.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VM Creation (simplified for clarity)</span></span><br><span class="line">az vm create \</span><br><span class="line">  --resource-group DevEnvironmentRG \</span><br><span class="line">  --name SharedDevVM \</span><br><span class="line">  --image Ubuntu2204 \</span><br><span class="line">  --size Standard_D8s_v3 \</span><br><span class="line">  --admin-username azureuser \</span><br><span class="line">  --generate-ssh-keys \</span><br><span class="line">  --public-ip-address-allocation static</span><br></pre></td></tr></table></figure><h3 id="Step-2-User-Account-Architecture"><a href="#Step-2-User-Account-Architecture" class="headerlink" title="Step 2: User Account Architecture"></a>Step 2: User Account Architecture</h3><p>Instead of having everyone share a single account (security nightmare!), we created individual Linux user accounts for each developer. This approach gave us:</p><ul><li><strong>Audit trails</strong>: We could track who did what and when</li><li><strong>Personalized environments</strong>: Each developer could customize their shell, aliases, and local configs</li><li><strong>Security isolation</strong>: Problems with one account wouldn‚Äôt affect others</li><li><strong>Resource monitoring</strong>: We could track resource usage per developer if needed</li></ul><p>Here‚Äôs how we automated user creation:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># create_dev_users.sh</span></span><br><span class="line"></span><br><span class="line">DEVELOPERS=(<span class="string">&quot;alice&quot;</span> <span class="string">&quot;bob&quot;</span> <span class="string">&quot;charlie&quot;</span> <span class="string">&quot;david&quot;</span> <span class="string">&quot;eve&quot;</span> <span class="string">&quot;frank&quot;</span> <span class="string">&quot;grace&quot;</span> <span class="string">&quot;henry&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dev <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;DEVELOPERS[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># Create user with home directory</span></span><br><span class="line">    sudo useradd -m -s /bin/bash <span class="variable">$dev</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create .ssh directory</span></span><br><span class="line">    sudo <span class="built_in">mkdir</span> -p /home/<span class="variable">$dev</span>/.ssh</span><br><span class="line">    sudo <span class="built_in">chmod</span> 700 /home/<span class="variable">$dev</span>/.ssh</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set up for SSH key authentication</span></span><br><span class="line">    sudo <span class="built_in">touch</span> /home/<span class="variable">$dev</span>/.ssh/authorized_keys</span><br><span class="line">    sudo <span class="built_in">chmod</span> 600 /home/<span class="variable">$dev</span>/.ssh/authorized_keys</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set ownership</span></span><br><span class="line">    sudo <span class="built_in">chown</span> -R <span class="variable">$dev</span>:<span class="variable">$dev</span> /home/<span class="variable">$dev</span>/.ssh</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Add to docker group (for container access)</span></span><br><span class="line">    sudo usermod -aG docker <span class="variable">$dev</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Created user: <span class="variable">$dev</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="Step-3-Certificate-Based-Authentication"><a href="#Step-3-Certificate-Based-Authentication" class="headerlink" title="Step 3: Certificate-Based Authentication"></a>Step 3: Certificate-Based Authentication</h3><p>Password authentication over the internet? Not on our watch. We implemented certificate-based SSH authentication for each developer:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># On each developer&#x27;s local machine</span></span><br><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;developer@project&quot;</span> -f ~/.ssh/project_dev_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># The public key was then added to their respective authorized_keys file on the VM</span></span><br></pre></td></tr></table></figure><p>The beauty of this approach:</p><ul><li>No passwords to remember or rotate</li><li>Certificates could be revoked instantly if needed</li><li>Multi-factor authentication could be added via Azure AD if required</li><li>Worked seamlessly even from the restricted environment (SSH client was available)</li></ul><h3 id="Step-4-VS-Code-Remote-Development-Magic"><a href="#Step-4-VS-Code-Remote-Development-Magic" class="headerlink" title="Step 4: VS Code Remote Development Magic"></a>Step 4: VS Code Remote Development Magic</h3><p>This is where the magic happened. VS Code‚Äôs Remote-SSH extension turned our Linux VM into a powerful development environment. Each developer configured their VS Code with:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .ssh/config on developer machine</span></span><br><span class="line">Host azure-dev-vm</span><br><span class="line">    HostName &lt;VM-PUBLIC-IP&gt;</span><br><span class="line">    User alice</span><br><span class="line">    IdentityFile ~/.ssh/project_dev_key</span><br><span class="line">    ForwardAgent yes</span><br></pre></td></tr></table></figure><p>Once connected, developers had the full VS Code experience:</p><ul><li>IntelliSense working perfectly</li><li>Debugging capabilities</li><li>Extension support</li><li>Integrated terminal</li><li>Git integration</li></ul><p>But we didn‚Äôt stop there‚Ä¶</p><h3 id="Step-5-The-Dev-Container-Revolution"><a href="#Step-5-The-Dev-Container-Revolution" class="headerlink" title="Step 5: The Dev Container Revolution"></a>Step 5: The Dev Container Revolution</h3><p>Here‚Äôs where we went from ‚Äúgood‚Äù to ‚Äúgame-changing.‚Äù We created a Dev Container that encapsulated our entire development environment. This meant:</p><p><strong>No more ‚Äúpip install‚Äù parties</strong>: Everything was pre-installed<br><strong>No more version conflicts</strong>: Everyone used the exact same versions<br><strong>No more missing dependencies</strong>: If it worked for one, it worked for all</p><p>Our <code>.devcontainer/devcontainer.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Autogen Development Environment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mcr.microsoft.com/devcontainers/python:1-3.12-bullseye&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;ghcr.io/devcontainers/features/anaconda:1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ghcr.io/devcontainers/features/azure-cli:1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ghcr.io/devcontainers/features/docker-outside-of-docker:1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;moby&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;installDockerBuildx&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;installDockerComposeSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dockerDashComposeVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ghcr.io/devcontainers-extra/features/apt-get-packages:1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;packages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;tig&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;github.copilot&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-docker&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-python.python&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-python.vscode-pylance&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;redhat.vscode-yaml&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;editorconfig.editorconfig&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azure-devops.azure-pipelines&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azure-load-testing.microsoft-testing&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.azure-dev&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azure-github-copilot&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azureappservice&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azurecontainerapps&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azurefunctions&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;eamodio.gitlens&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azurelogicapps&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azureresourcegroups&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azurestaticwebapps&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azurestorage&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azurevirtualmachines&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-bicep&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-containers&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-cosmosdb&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-docker&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-python.black-formatter&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-python.debugpy&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-python.isort&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-python.pylint&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-python.python&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-python.vscode-pylance&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-vscode.azure-repos&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-vscode.azurecli&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.azure-dev&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;ms-azuretools.vscode-azure-github-copilot&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// &quot;postCreateCommand&quot;: &quot;pip3 install --user -r requirements.txt&quot;,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Step-6-Shared-Resources-and-Collaboration"><a href="#Step-6-Shared-Resources-and-Collaboration" class="headerlink" title="Step 6: Shared Resources and Collaboration"></a>Step 6: Shared Resources and Collaboration</h3><p>With everyone working on the same VM, we could leverage shared resources effectively:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Shared directories for common resources</span></span><br><span class="line">/home/shared/</span><br><span class="line">‚îú‚îÄ‚îÄ datasets/          <span class="comment"># Common datasets for AI training</span></span><br><span class="line">‚îú‚îÄ‚îÄ models/           <span class="comment"># Shared model artifacts</span></span><br><span class="line">‚îú‚îÄ‚îÄ configs/          <span class="comment"># Shared configuration files</span></span><br><span class="line">‚îî‚îÄ‚îÄ scripts/          <span class="comment"># Utility scripts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Permissions set for group collaboration</span></span><br><span class="line">sudo groupadd developers</span><br><span class="line">sudo usermod -a -G developers alice bob charlie... <span class="comment"># all developers</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R :developers /home/shared</span><br><span class="line">sudo <span class="built_in">chmod</span> -R 775 /home/shared</span><br></pre></td></tr></table></figure><h2 id="The-Unexpected-Benefits"><a href="#The-Unexpected-Benefits" class="headerlink" title="The Unexpected Benefits"></a>The Unexpected Benefits</h2><h3 id="1-Lightning-Fast-Onboarding"><a href="#1-Lightning-Fast-Onboarding" class="headerlink" title="1. Lightning-Fast Onboarding"></a>1. Lightning-Fast Onboarding</h3><p>Our typical onboarding process used to take 2-3 days:</p><ul><li>Day 1: Install Python, configure environment</li><li>Day 2: Debug dependency issues, version conflicts</li><li>Day 3: Finally start actual development</li></ul><p>With our new setup:</p><ul><li>Hour 1: Receive SSH certificate and connection instructions</li><li>Hour 2: Connect VS Code, open project in container</li><li>Hour 3: Writing production code</li></ul><p><strong>That‚Äôs a 94% reduction in onboarding time!</strong></p><h3 id="2-Compute-Power-Democracy"><a href="#2-Compute-Power-Democracy" class="headerlink" title="2. Compute Power Democracy"></a>2. Compute Power Democracy</h3><p>Previously, developers with older laptops struggled with AI model training and testing. Now everyone had access to:</p><ul><li>8 vCPUs for parallel processing</li><li>32 GB RAM for large datasets</li><li>Fast SSD storage for quick I&#x2F;O</li><li>Azure‚Äôs network backbone for downloading models and datasets</li></ul><h3 id="3-Cost-Optimization-That-Surprised-Finance"><a href="#3-Cost-Optimization-That-Surprised-Finance" class="headerlink" title="3. Cost Optimization That Surprised Finance"></a>3. Cost Optimization That Surprised Finance</h3><p>Our finance team loved this approach:</p><ul><li><strong>Traditional approach</strong>: 8 high-spec laptops &#x3D; ~$16,000</li><li><strong>Our approach</strong>: 1 Azure VM &#x3D; ~$400&#x2F;month</li></ul><p>Even accounting for the VM running 24&#x2F;7, we saved money within the first year.</p><h3 id="4-Security-Without-Suffering"><a href="#4-Security-Without-Suffering" class="headerlink" title="4. Security Without Suffering"></a>4. Security Without Suffering</h3><p>The restricted environment developers could finally contribute without compromising security:</p><ul><li>No software installed on their local machines</li><li>All code remained in the cloud</li><li>Audit logs for every action</li><li>Easy to revoke access when project ended</li></ul><h2 id="Real-World-Results-The-AutoGen-Project"><a href="#Real-World-Results-The-AutoGen-Project" class="headerlink" title="Real-World Results: The AutoGen Project"></a>Real-World Results: The AutoGen Project</h2><p>Let me share some specific wins from our AutoGen AI agent project:</p><h3 id="Development-Velocity"><a href="#Development-Velocity" class="headerlink" title="Development Velocity"></a>Development Velocity</h3><ul><li><strong>Before</strong>: 2-3 features per sprint (too much time on environment issues)</li><li><strong>After</strong>: 8-10 features per sprint (focus on actual development)</li></ul><h3 id="Code-Quality"><a href="#Code-Quality" class="headerlink" title="Code Quality"></a>Code Quality</h3><ul><li><strong>Before</strong>: ‚ÄúWorks on my machine‚Äù was a daily phrase</li><li><strong>After</strong>: If it worked in the dev container, it worked everywhere</li></ul><h3 id="Team-Morale"><a href="#Team-Morale" class="headerlink" title="Team Morale"></a>Team Morale</h3><ul><li><strong>Before</strong>: Frustration with environment setup and restrictions</li><li><strong>After</strong>: Developers focused on solving interesting AI problems</li></ul><h3 id="Specific-AutoGen-Benefits"><a href="#Specific-AutoGen-Benefits" class="headerlink" title="Specific AutoGen Benefits"></a>Specific AutoGen Benefits</h3><p>Working with AutoGen requires multiple AI models, API keys, and complex configurations. Our setup handled this beautifully:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Shared configuration file accessible to all</span></span><br><span class="line"><span class="comment"># /home/shared/configs/autogen_config.py</span></span><br><span class="line"></span><br><span class="line">config_list = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: <span class="string">&quot;gpt-4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;api_key&quot;</span>: os.environ.get(<span class="string">&quot;OPENAI_API_KEY&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: <span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;api_key&quot;</span>: os.environ.get(<span class="string">&quot;OPENAI_API_KEY&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Each developer could test with the same models and configurations</span></span><br><span class="line"><span class="comment"># No &quot;I don&#x27;t have API access&quot; blockers</span></span><br></pre></td></tr></table></figure><h2 id="Lessons-Learned-and-Best-Practices"><a href="#Lessons-Learned-and-Best-Practices" class="headerlink" title="Lessons Learned and Best Practices"></a>Lessons Learned and Best Practices</h2><h3 id="What-Worked-Well"><a href="#What-Worked-Well" class="headerlink" title="What Worked Well"></a>What Worked Well</h3><ol><li><p><strong>Start with more resources than you think you need</strong>: We initially tried a smaller VM and hit performance issues. Better to scale down than suffer with poor performance.</p></li><li><p><strong>Invest time in the Dev Container setup</strong>: Every hour spent perfecting the container saved days of debugging later.</p></li><li><p><strong>Document everything</strong>: We created a comprehensive wiki with:</p><ul><li>Connection instructions</li><li>Troubleshooting guides</li><li>Best practices for shared development</li><li>Git workflow for the shared environment</li></ul></li><li><p><strong>Regular backups</strong>: We automated daily backups of the entire VM and home directories.</p></li></ol><h3 id="Challenges-We-Faced"><a href="#Challenges-We-Faced" class="headerlink" title="Challenges We Faced"></a>Challenges We Faced</h3><ol><li><p><strong>Concurrent file editing</strong>: We needed clear Git workflows to prevent conflicts</p><ul><li>Solution: Feature branches and frequent commits</li></ul></li><li><p><strong>Resource contention</strong>: Occasionally, one developer‚Äôs process would hog resources</p><ul><li>Solution: Implemented resource limits using cgroups</li></ul></li><li><p><strong>SSH connection drops</strong>: Some developers faced connection issues</p><ul><li>Solution: Configured SSH keep-alive and implemented tmux for session persistence</li></ul></li></ol><h3 id="Security-Considerations"><a href="#Security-Considerations" class="headerlink" title="Security Considerations"></a>Security Considerations</h3><p>Don‚Äôt forget these crucial security aspects:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Implement fail2ban for SSH protection</span></span><br><span class="line">sudo apt-get install fail2ban</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure firewall rules</span></span><br><span class="line">sudo ufw allow from &lt;OFFICE_IP_RANGE&gt; to any port 22</span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular security updates</span></span><br><span class="line">sudo unattended-upgrades</span><br><span class="line"></span><br><span class="line"><span class="comment"># Audit logging</span></span><br><span class="line">sudo apt-get install auditd</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>What started as a desperate attempt to enable collaboration across restricted environments turned into a revolutionary approach to distributed development. By leveraging Azure VMs, Dev Containers, and VS Code Remote Development, we not only solved our immediate problem but discovered a solution that offers:</p><ul><li><strong>94% faster onboarding</strong> for new team members</li><li><strong>Significant cost savings</strong> compared to traditional hardware approaches</li><li><strong>Enhanced security</strong> without sacrificing developer productivity</li><li><strong>True collaboration</strong> through shared resources and environments</li><li><strong>Consistent development experience</strong> across all team members</li></ul><p>The key insight was recognizing that personal laptops could serve as the bridge between restricted corporate environments and cloud-based development infrastructure. Sometimes the best solutions come from thinking outside the traditional corporate IT box.</p><p>Whether you‚Äôre dealing with similar restrictions or simply want to improve your team‚Äôs development experience, this architecture pattern could be the game-changer you‚Äôre looking for. The combination of Azure infrastructure, containerized development environments, and modern remote development tools creates a powerful platform that scales with your team‚Äôs needs.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://code.visualstudio.com/docs/remote/remote-overview">VS Code Remote Development</a></li><li><a href="https://containers.dev/">Dev Containers Documentation</a></li><li><a href="https://azure.microsoft.com/services/virtual-machines/">Azure Virtual Machines</a></li><li><a href="https://github.com/microsoft/autogen">Microsoft AutoGen Framework</a></li><li><a href="https://www.ssh.com/academy/ssh/public-key-authentication">SSH Key-Based Authentication</a></li><li>Main image generated by <a href="https://openai.com/blog/dall-e/">DALL-E</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Distributed Development with Azure VMs and Dev Containers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post details solving a distributed development challenge where 8 developers from different organizations needed to collaborate on an AutoGen AI project - 4 from restricted corporate environments unable to install development tools, and 4 external developers without access to client systems. The solution uses a shared Azure VM (Standard D8s v3) with individual user accounts, certificate-based SSH authentication, and VS Code Remote Development connected to a shared Dev Container environment. The architecture eliminates ‚Äúworks on my machine‚Äù issues by providing consistent development environments, shared resources (datasets, models, configs), and enables real-time collaboration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation highlights:&lt;/strong&gt; Automated user provisioning scripts, VS Code Remote-SSH configuration, comprehensive devcontainer.json with pre-installed Python 3.12&amp;#x2F;AutoGen&amp;#x2F;Azure CLI, shared directory structures, and security hardening with fail2ban and UFW. &lt;strong&gt;&lt;a href=&quot;https://github.com/Ricky-G/script-library&quot;&gt;Development environment setup scripts and configurations documented here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Introduction-When-Traditional-Solutions-Hit-a-Wall&quot;&gt;&lt;a href=&quot;#Introduction-When-Traditional-Solutions-Hit-a-Wall&quot; class=&quot;headerlink&quot; title=&quot;Introduction: When Traditional Solutions Hit a Wall&quot;&gt;&lt;/a&gt;Introduction: When Traditional Solutions Hit a Wall&lt;/h2&gt;&lt;p&gt;Last month, I found myself facing a challenge that I‚Äôm sure many of you have encountered: How do you enable seamless collaboration for a development team when half of them work in a locked-down environment where they can‚Äôt install any development tools, and the other half can‚Äôt access the client‚Äôs systems?&lt;/p&gt;
&lt;p&gt;Our team of eight developers was tasked with building a proof-of-concept (PoC) for an AI-powered agentic system using Microsoft‚Äôs AutoGen framework. Here‚Äôs the kicker: this was a 3-week PoC sprint bringing together two teams from different organizations who had never worked together before. We needed a collaborative environment that could be spun up quickly, require minimal setup effort, and allow everyone to hit the ground running from day one.&lt;/p&gt;
&lt;p&gt;The project requirements were complex enough, but the real challenge? Four developers worked from a highly restricted corporate environment where installing Python, VS Code, or any development tools was strictly prohibited. The remaining four worked from our offices but couldn‚Äôt access the client‚Äôs internal systems directly.&lt;/p&gt;
&lt;p&gt;We tried the usual approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RDP connections&lt;/strong&gt;: Blocked by security policies&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VPN access&lt;/strong&gt;: Denied due to compliance requirements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local development with file sharing&lt;/strong&gt;: Immediate sync issues and ‚Äúworks on my machine‚Äù problems&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud IDEs&lt;/strong&gt;: Didn‚Äôt meet the client‚Äôs security requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just when we thought we‚Äôd have to resort to the dreaded ‚Äúdevelop locally and pray it works in production‚Äù approach, we discovered a solution that not only solved our immediate problem but revolutionized how we approach distributed development.&lt;/p&gt;
&lt;h2 id=&quot;The-Architecture-That-Worked-For-Us&quot;&gt;&lt;a href=&quot;#The-Architecture-That-Worked-For-Us&quot; class=&quot;headerlink&quot; title=&quot;The Architecture That Worked For Us&quot;&gt;&lt;/a&gt;The Architecture That Worked For Us&lt;/h2&gt;&lt;p&gt;Here‚Äôs a visual representation of what we built, everyone had to work on their personal (non-corporate) laptops for this to work.&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;flowchart TD
    A[&quot;ÔøΩ 8 Developers on Personal Laptops&lt;br/&gt;4 Restricted + 4 External Teams&quot;]
    
    B[&quot;ÔøΩ SSH + VS Code Remote Connection&lt;br/&gt;Certificate-based Authentication&quot;]
    
    C[&quot;‚òÅÔ∏è Azure VM (Standard D8s v3)&lt;br/&gt;8 vCPUs ‚Ä¢ 32GB RAM ‚Ä¢ Ubuntu 22.04&quot;]
    
    D[&quot;üë§ Individual User Accounts&lt;br/&gt;user1, user2, user3... user8&quot;]
    
    E[&quot;üê≥ Shared Dev Container&lt;br/&gt;Python 3.12 + AutoGen + Azure CLI&lt;br/&gt;All Dependencies Pre-installed&quot;]
    
    F[&quot;üìÇ Shared Development Resources&lt;br/&gt;‚Ä¢ Project Repository&lt;br/&gt;‚Ä¢ Datasets &amp; Models&lt;br/&gt;‚Ä¢ Configuration Files&quot;]
    
    G[&quot;‚úÖ Results Achieved&lt;br/&gt;94% Faster Onboarding&lt;br/&gt;$400/month vs $16k laptops&lt;br/&gt;Enhanced Security&quot;]
    
    A --&gt; B
    B --&gt; C
    C --&gt; D
    D --&gt; E
    E --&gt; F
    F --&gt; G
    
    style A fill:#e3f2fd,stroke:#1976d2,stroke-width:3px,color:#000
    style B fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px,color:#000
    style C fill:#e1f5fe,stroke:#0277bd,stroke-width:3px,color:#000
    style D fill:#fff3e0,stroke:#f57c00,stroke-width:3px,color:#000
    style E fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px,color:#000
    style F fill:#fff3e0,stroke:#f57c00,stroke-width:3px,color:#000
    style G fill:#e8f5e8,stroke:#388e3c,stroke-width:3px,color:#000&lt;/pre&gt;
&lt;p&gt;Lets check out how this was built and setup‚Ä¶&lt;/p&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="DevOps" scheme="https://clouddev.blog/categories/Azure/DevOps/"/>
    
    <category term="Development" scheme="https://clouddev.blog/categories/Azure/DevOps/Development/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="DevOps" scheme="https://clouddev.blog/tags/DevOps/"/>
    
    <category term="Development Environment" scheme="https://clouddev.blog/tags/Development-Environment/"/>
    
    <category term="Dev Containers" scheme="https://clouddev.blog/tags/Dev-Containers/"/>
    
    <category term="Remote Development" scheme="https://clouddev.blog/tags/Remote-Development/"/>
    
    <category term="VS Code" scheme="https://clouddev.blog/tags/VS-Code/"/>
    
    <category term="Collaboration" scheme="https://clouddev.blog/tags/Collaboration/"/>
    
    <category term="Virtual Machines" scheme="https://clouddev.blog/tags/Virtual-Machines/"/>
    
    <category term="AutoGen" scheme="https://clouddev.blog/tags/AutoGen/"/>
    
    <category term="AI Development" scheme="https://clouddev.blog/tags/AI-Development/"/>
    
  </entry>
  
  <entry>
    <title>Custom Voices in Azure OpenAI Realtime with Azure Speech Services</title>
    <link href="https://clouddev.blog/Azure/AI/Speech/custom-voices-in-azure-openai-realtime-with-azure-speech-services/"/>
    <id>https://clouddev.blog/Azure/AI/Speech/custom-voices-in-azure-openai-realtime-with-azure-speech-services/</id>
    <published>2025-04-24T12:00:00.000Z</published>
    <updated>2025-08-06T11:18:24.377Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Hybrid GPT-4o Realtime with Azure Speech Services Custom Voices</strong></p><p>This post demonstrates bypassing GPT-4o Realtime‚Äôs built-in voice limitations by creating a hybrid architecture that combines GPT-4o‚Äôs conversational intelligence with Azure Speech Services‚Äô extensive voice catalog. The solution configures GPT-4o Realtime for text-only output (<code>ContentModalities.Text</code>) and routes responses through Azure Speech Services, enabling access to 400+ neural voices, custom neural voices (CNV), and SSML control. The implementation includes intelligent barge-in functionality using real-time audio amplitude monitoring, allowing users to interrupt the assistant naturally mid-response.</p><p><strong>Technical implementation:</strong> C# application using Azure.AI.OpenAI and Microsoft.CognitiveServices.Speech SDKs, NAudio for audio I&#x2F;O, streaming text collection from GPT-4o responses, RMS-based speech detection with configurable thresholds, and concurrent audio management for seamless interruption handling. <strong><a href="https://github.com/Ricky-G/azure-scenario-hub/tree/main/custom-voice-sample-code">Complete C# source code with audio helpers available here</a></strong></p></blockquote><hr><p>Building realtime voice-enabled applications with Azure OpenAI‚Äôs GPT-4o Realtime model is incredibly powerful, but there‚Äôs one significant limitation that can be a deal-breaker for many use cases: you‚Äôre stuck with OpenAI‚Äôs predefined voices like ‚Äúsage‚Äù, ‚Äúalloy‚Äù, ‚Äúecho‚Äù, ‚Äúfable‚Äù, ‚Äúonyx‚Äù, and ‚Äúnova‚Äù. </p><p>What if you‚Äôre building a branded customer service bot that needs to match your company‚Äôs voice identity? Or developing a therapeutic application for children with autism where the voice quality and tone are crucial for engagement? What if your users need to interrupt the assistant naturally, just like in real human conversations?</p><p>In this comprehensive guide, I‚Äôll show you exactly how I solved these challenges by building a hybrid solution that combines the conversational intelligence of GPT-4o Realtime with the voice flexibility of Azure Speech Services. We‚Äôll dive deep into the implementation, covering everything from the initial problem to the complete working solution.</p><pre class="mermaid">flowchart TD    A[üë§ User speaks] --> B[üé§ Microphone Input]    B --> C{Barge-in Detection<br/>Audio Level > Threshold?}    C -->|Yes| D[üõë Stop Azure Speech]    C -->|No| E[üì° Stream to GPT-4o Realtime]        E --> F[üß† GPT-4o Processing]    F --> G[üìù Text Response<br/>ContentModalities.Text]        G --> H[üó£Ô∏è Azure Speech Services<br/>Custom/Neural Voice]    H --> I[üîä Audio Output]        D --> E    I --> J[üëÇ User hears response]    J --> A        style A fill:#e1f5fe    style D fill:#ffebee    style G fill:#f3e5f5    style H fill:#e8f5e8    style I fill:#fff3e0</pre><span id="more"></span><h2 id="The-real-problem-Why-GPT-4o-Realtime‚Äôs-voice-limitations-matter"><a href="#The-real-problem-Why-GPT-4o-Realtime‚Äôs-voice-limitations-matter" class="headerlink" title="The real problem: Why GPT-4o Realtime‚Äôs voice limitations matter"></a>The real problem: Why GPT-4o Realtime‚Äôs voice limitations matter</h2><p>When you‚Äôre working with Azure OpenAI‚Äôs GPT-4o Realtime API, the standard approach involves configuring a <code>RealtimeConversationSession</code> with one of the predefined voices. While these voices are high-quality, they create several significant limitations:</p><h3 id="1-Limited-voice-selection"><a href="#1-Limited-voice-selection" class="headerlink" title="1. Limited voice selection"></a>1. Limited voice selection</h3><p>You‚Äôre restricted to just six built-in voices. There‚Äôs no access to Azure Speech Services‚Äô extensive catalog of 400+ neural voices across 140+ languages and locales. You can‚Äôt use premium voices like Jenny Neural (en-US) or specialized voices optimized for different use cases.</p><h3 id="2-No-custom-neural-voices"><a href="#2-No-custom-neural-voices" class="headerlink" title="2. No custom neural voices"></a>2. No custom neural voices</h3><p>Perhaps most importantly, you can‚Äôt integrate custom neural voices (CNV) that you‚Äôve trained in Azure Speech Studio. This is crucial for:</p><ul><li><strong>Brand consistency</strong>: Companies that have invested in custom voice branding</li><li><strong>Specialized applications</strong>: Healthcare, education, or accessibility apps requiring specific voice characteristics</li><li><strong>Multilingual scenarios</strong>: Custom voices trained on specific accents or dialects</li></ul><h3 id="3-No-natural-interruption-barge-in"><a href="#3-No-natural-interruption-barge-in" class="headerlink" title="3. No natural interruption (barge-in)"></a>3. No natural interruption (barge-in)</h3><p>The built-in system doesn‚Äôt provide a way for users to naturally interrupt the assistant mid-response. In real conversations, we constantly interrupt each other‚Äîit‚Äôs natural and expected. Without this capability, your bot feels robotic and frustrating to use.</p><h3 id="4-Limited-voice-control"><a href="#4-Limited-voice-control" class="headerlink" title="4. Limited voice control"></a>4. Limited voice control</h3><p>You can‚Äôt dynamically adjust speech rate, pitch, or emphasis using SSML (Speech Synthesis Markup Language) that Azure Speech Services supports.</p><h2 id="The-solution-Hybrid-architecture-with-Azure-Speech-Services"><a href="#The-solution-Hybrid-architecture-with-Azure-Speech-Services" class="headerlink" title="The solution: Hybrid architecture with Azure Speech Services"></a>The solution: Hybrid architecture with Azure Speech Services</h2><p>The solution I‚Äôve developed bypasses GPT-4o‚Äôs built-in text-to-speech entirely and routes the conversation text through Azure Speech Services. Here‚Äôs the high-level architecture:</p><ol><li><strong>Configure GPT-4o for text-only output</strong>: Disable built-in audio synthesis</li><li><strong>Stream and capture text responses</strong>: Collect the assistant‚Äôs text as it streams</li><li><strong>Route text to Azure Speech Services</strong>: Use any voice from Azure‚Äôs catalog or your custom neural voices</li><li><strong>Implement intelligent barge-in</strong>: Monitor microphone input and stop speech when user starts talking</li><li><strong>Seamless audio management</strong>: Handle audio playback and interruption smoothly</li></ol><p>This approach gives you the best of both worlds: GPT-4o‚Äôs intelligent conversation handling with Azure Speech Services‚Äô superior voice options and control.</p><h2 id="Deep-dive-Implementation-walkthrough"><a href="#Deep-dive-Implementation-walkthrough" class="headerlink" title="Deep dive: Implementation walkthrough"></a>Deep dive: Implementation walkthrough</h2><p>Let me walk you through the complete implementation, explaining each component and how they work together.</p><h3 id="Project-structure-and-dependencies"><a href="#Project-structure-and-dependencies" class="headerlink" title="Project structure and dependencies"></a>Project structure and dependencies</h3><p>First, let‚Äôs look at the project structure. The solution consists of several key components:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RealtimeChat/</span><br><span class="line">‚îú‚îÄ‚îÄ Program.cs                 # Main application logic</span><br><span class="line">‚îú‚îÄ‚îÄ AppSettings.cs             # Configuration classes</span><br><span class="line">‚îú‚îÄ‚îÄ Constants.cs               # Application constants</span><br><span class="line">‚îî‚îÄ‚îÄ Helpers/</span><br><span class="line">    ‚îú‚îÄ‚îÄ AudioInputHelper.cs    # Microphone input and barge-in detection</span><br><span class="line">    ‚îú‚îÄ‚îÄ AudioOutputHelper.cs   # Audio playback management</span><br><span class="line">    ‚îî‚îÄ‚îÄ ConsoleHelper.cs       # Console UI utilities</span><br></pre></td></tr></table></figure><p>The key NuGet packages you‚Äôll need:</p><ul><li><code>Azure.AI.OpenAI</code> - For GPT-4o Realtime API</li><li><code>Microsoft.CognitiveServices.Speech</code> - For Azure Speech Services</li><li><code>NAudio</code> - For audio input&#x2F;output handling</li><li><code>Microsoft.Extensions.Configuration.Json</code> - For configuration management</li></ul><h3 id="Configuration-setup"><a href="#Configuration-setup" class="headerlink" title="Configuration setup"></a>Configuration setup</h3><p>The configuration is designed to be flexible and environment-specific. Here‚Äôs the complete <code>AppSettings.cs</code> structure:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppSettings</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> AzureOpenAISettings AzureOpenAI &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span>();</span><br><span class="line">    <span class="keyword">public</span> AzureSpeechSettings AzureSpeech &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span>();</span><br><span class="line">    <span class="keyword">public</span> ConversationSettings Conversation &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> BargeInThreshold &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AzureOpenAISettings</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Endpoint &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ApiKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ChatModelName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> RealtimeModelName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AzureSpeechSettings</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SubscriptionKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Region &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> VoiceName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConversationSettings</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OpenAIBuiltInVoice &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;sage&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> ServerDetectionThreshold &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">0.1f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ServerSilenceMs &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">150</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And your <code>appsettings.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;AzureOpenAI&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://your-openai-resource.openai.azure.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ApiKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-openai-api-key&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ChatModelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-4o&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;RealtimeModelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-4o-realtime-preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AzureSpeech&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;SubscriptionKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-speech-service-key&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Region&quot;</span><span class="punctuation">:</span> <span class="string">&quot;australiaeast&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;VoiceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en-US-AnaNeural&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Conversation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;OpenAIBuiltInVoice&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ServerDetectionThreshold&quot;</span><span class="punctuation">:</span> <span class="number">0.1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ServerSilenceMs&quot;</span><span class="punctuation">:</span> <span class="number">150</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;BargeInThreshold&quot;</span><span class="punctuation">:</span> <span class="number">0.02</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="The-heart-of-the-solution-Program-cs"><a href="#The-heart-of-the-solution-Program-cs" class="headerlink" title="The heart of the solution: Program.cs"></a>The heart of the solution: Program.cs</h3><p>The main program orchestrates all the components. Let‚Äôs break down the key sections:</p><h4 id="Service-initialization"><a href="#Service-initialization" class="headerlink" title="Service initialization"></a>Service initialization</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> (SpeechConfig, AzureOpenAIClient) InitializeServices(AppSettings appSettings)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Configure Azure Speech Services</span></span><br><span class="line">    SpeechConfig speechConfig = SpeechConfig.FromSubscription(</span><br><span class="line">        appSettings.AzureSpeech.SubscriptionKey,</span><br><span class="line">        appSettings.AzureSpeech.Region</span><br><span class="line">    );</span><br><span class="line">    speechConfig.SpeechSynthesisVoiceName = appSettings.AzureSpeech.VoiceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure Azure OpenAI client</span></span><br><span class="line">    <span class="keyword">var</span> aoaiClient = <span class="keyword">new</span> AzureOpenAIClient(</span><br><span class="line">        <span class="keyword">new</span> Uri(appSettings.AzureOpenAI.Endpoint),</span><br><span class="line">        <span class="keyword">new</span> ApiKeyCredential(appSettings.AzureOpenAI.ApiKey)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (speechConfig, aoaiClient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Critical-Text-only-configuration"><a href="#Critical-Text-only-configuration" class="headerlink" title="Critical: Text-only configuration"></a>Critical: Text-only configuration</h4><p>This is the key breakthrough‚Äîconfiguring GPT-4o Realtime to output only text, not audio:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> session.ConfigureSessionAsync(<span class="keyword">new</span> ConversationSessionOptions()</span><br><span class="line">&#123;</span><br><span class="line">    Voice = <span class="keyword">new</span> ConversationVoice(appSettings.Conversation.OpenAIBuiltInVoice),</span><br><span class="line">    ContentModalities = ConversationContentModalities.Text, <span class="comment">// üî• This is crucial!</span></span><br><span class="line">    Instructions = Constants.MainPrompt,</span><br><span class="line">    InputTranscriptionOptions = <span class="keyword">new</span>() &#123; Model = <span class="string">&quot;whisper-1&quot;</span> &#125;,</span><br><span class="line">    TurnDetectionOptions = ConversationTurnDetectionOptions</span><br><span class="line">        .CreateServerVoiceActivityTurnDetectionOptions(</span><br><span class="line">            detectionThreshold: appSettings.Conversation.ServerDetectionThreshold,</span><br><span class="line">            silenceDuration: TimeSpan.FromMilliseconds(appSettings.Conversation.ServerSilenceMs)</span><br><span class="line">        ),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>By setting <code>ContentModalities = ConversationContentModalities.Text</code>, we tell GPT-4o to only send us text responses, not audio bytes. This is what allows us to route the text through Azure Speech Services instead.</p><h3 id="Advanced-barge-in-implementation"><a href="#Advanced-barge-in-implementation" class="headerlink" title="Advanced barge-in implementation"></a>Advanced barge-in implementation</h3><p>The barge-in feature is implemented in <code>AudioInputHelper.cs</code> and is one of the most sophisticated parts of the solution. Here‚Äôs how it works:</p><h4 id="Real-time-amplitude-monitoring"><a href="#Real-time-amplitude-monitoring" class="headerlink" title="Real-time amplitude monitoring"></a>Real-time amplitude monitoring</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsSpeechAboveThreshold</span>(<span class="params"><span class="built_in">byte</span>[] buffer, <span class="built_in">int</span> length, <span class="built_in">double</span> threshold</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">int</span> sampleCount = length / <span class="number">2</span>; <span class="comment">// 16-bit samples</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">short</span> sample = BitConverter.ToInt16(buffer, i);</span><br><span class="line">        sum += sample * (<span class="built_in">double</span>)sample;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate RMS (Root Mean Square) of the audio</span></span><br><span class="line">    <span class="built_in">double</span> rms = Math.Sqrt(sum / sampleCount);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Normalize to [0..1] range</span></span><br><span class="line">    <span class="built_in">double</span> normalized = rms / <span class="number">32768.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Compare to threshold</span></span><br><span class="line">    <span class="keyword">return</span> normalized &gt; threshold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Smart-barge-in-event-handling"><a href="#Smart-barge-in-event-handling" class="headerlink" title="Smart barge-in event handling"></a>Smart barge-in event handling</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_waveInEvent.DataAvailable += (_, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. Always copy to ring buffer for GPT-4o input</span></span><br><span class="line">    <span class="keyword">lock</span> (_bufferLock)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ... buffer management code ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Check for user speech (barge-in detection)</span></span><br><span class="line">    <span class="keyword">if</span> (IsSpeechAboveThreshold(e.Buffer, e.BytesRecorded, _bargeInThreshold))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> now = DateTime.UtcNow;</span><br><span class="line">        <span class="comment">// Prevent event spam with cooldown period</span></span><br><span class="line">        <span class="keyword">if</span> ((now - _lastSpeechDetected).TotalMilliseconds &gt; <span class="number">500</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _lastSpeechDetected = now;</span><br><span class="line">            UserSpeechDetected?.Invoke(); <span class="comment">// Trigger barge-in!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Barge-in-event-wiring"><a href="#Barge-in-event-wiring" class="headerlink" title="Barge-in event wiring"></a>Barge-in event wiring</h4><p>In the main session handler, we wire up the barge-in detection:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HandleSessionStartedUpdate</span>(<span class="params">RealtimeConversationSession session, AppSettings appSettings, SpeechSynthesizer? currentSynthesizer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _ = Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> AudioInputHelper audioInputHelper = AudioInputHelper.Start(appSettings.BargeInThreshold);</span><br><span class="line"></span><br><span class="line">        audioInputHelper.UserSpeechDetected += () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            ConsoleHelper.DisplayMessage(<span class="string">&quot;&lt;&lt;&lt; USER INTERRUPTION DETECTED! Stopping speech...&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (currentSynthesizer != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                currentSynthesizer.StopSpeakingAsync().Wait(); <span class="comment">// Stop immediately!</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> session.SendInputAudioAsync(audioInputHelper);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Streaming-text-processing-and-Azure-Speech-integration"><a href="#Streaming-text-processing-and-Azure-Speech-integration" class="headerlink" title="Streaming text processing and Azure Speech integration"></a>Streaming text processing and Azure Speech integration</h3><p>The magic happens in how we handle the streaming response from GPT-4o and route it to Azure Speech Services:</p><h4 id="Collecting-streaming-text"><a href="#Collecting-streaming-text" class="headerlink" title="Collecting streaming text"></a>Collecting streaming text</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HandleStreamingPartDeltaUpdate</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    ConversationItemStreamingPartDeltaUpdate deltaUpdate, </span></span></span><br><span class="line"><span class="params"><span class="function">    Dictionary&lt;<span class="built_in">string</span>, StringBuilder&gt; partialTextByItemId, </span></span></span><br><span class="line"><span class="params"><span class="function">    AudioOutputHelper audioOutputHelper</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> chunk = deltaUpdate.Text ?? deltaUpdate.AudioTranscript;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrWhiteSpace(chunk))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!partialTextByItemId.ContainsKey(deltaUpdate.ItemId))</span><br><span class="line">        &#123;</span><br><span class="line">            partialTextByItemId[deltaUpdate.ItemId] = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        &#125;</span><br><span class="line">        partialTextByItemId[deltaUpdate.ItemId].Append(chunk);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> We completely ignore deltaUpdate.AudioBytes since we&#x27;re using Azure Speech</span></span><br><span class="line">    <span class="comment">// Uncomment the next line if you want to fall back to built-in voice:</span></span><br><span class="line">    <span class="comment">// audioOutputHelper.EnqueueForPlayback(deltaUpdate.AudioBytes);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Converting-text-to-speech-with-Azure-Speech-Services"><a href="#Converting-text-to-speech-with-Azure-Speech-Services" class="headerlink" title="Converting text to speech with Azure Speech Services"></a>Converting text to speech with Azure Speech Services</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">HandleStreamingFinishedUpdate</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    ConversationItemStreamingFinishedUpdate itemFinishedUpdate, </span></span></span><br><span class="line"><span class="params"><span class="function">    Dictionary&lt;<span class="built_in">string</span>, StringBuilder&gt; partialTextByItemId, </span></span></span><br><span class="line"><span class="params"><span class="function">    SpeechConfig speechConfig, </span></span></span><br><span class="line"><span class="params"><span class="function">    SpeechSynthesizer? currentSynthesizer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (partialTextByItemId.TryGetValue(itemFinishedUpdate.ItemId, <span class="keyword">out</span> <span class="keyword">var</span> sb))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> finalAssistantText = sb.ToString();</span><br><span class="line">        ConsoleHelper.DisplayMessage(<span class="string">$&quot;Assistant: <span class="subst">&#123;finalAssistantText&#125;</span>&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Route to Azure Speech Services</span></span><br><span class="line">        <span class="keyword">await</span> SpeakWithAzureSpeechAsync(finalAssistantText, speechConfig, currentSynthesizer);</span><br><span class="line"></span><br><span class="line">        partialTextByItemId.Remove(itemFinishedUpdate.ItemId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">async</span> Task&lt;SpeechSynthesizer?&gt; SpeakWithAzureSpeechAsync(</span><br><span class="line">    <span class="built_in">string</span> text, </span><br><span class="line">    SpeechConfig speechConfig, </span><br><span class="line">    SpeechSynthesizer? synthesizer)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(text)) <span class="keyword">return</span> synthesizer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop any current speech before starting new</span></span><br><span class="line">    <span class="keyword">if</span> (synthesizer != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> synthesizer.StopSpeakingAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Synthesize with Azure Speech Services</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> synthesizer.SpeakTextAsync(text);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (result.Reason == ResultReason.SynthesizingAudioCompleted)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;‚úÖ Speech synthesis completed successfully&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result.Reason == ResultReason.Canceled)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> cancellation = SpeechSynthesisCancellationDetails.FromResult(result);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;‚ùå Speech canceled: <span class="subst">&#123;cancellation.Reason&#125;</span>, <span class="subst">&#123;cancellation.ErrorDetails&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> synthesizer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Advanced-scenarios-and-customization"><a href="#Advanced-scenarios-and-customization" class="headerlink" title="Advanced scenarios and customization"></a>Advanced scenarios and customization</h2><h3 id="Using-custom-neural-voices"><a href="#Using-custom-neural-voices" class="headerlink" title="Using custom neural voices"></a>Using custom neural voices</h3><p>To use a custom neural voice you‚Äôve trained in Azure Speech Studio, simply update your configuration:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;AzureSpeech&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;VoiceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YourCustomVoiceName&quot;</span><span class="punctuation">,</span> <span class="comment">// Your CNV endpoint name</span></span><br><span class="line">    <span class="attr">&quot;Region&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eastus&quot;</span><span class="punctuation">,</span> <span class="comment">// Region where your CNV is deployed</span></span><br><span class="line">    <span class="attr">&quot;SubscriptionKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-key&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="SSML-support-for-advanced-voice-control"><a href="#SSML-support-for-advanced-voice-control" class="headerlink" title="SSML support for advanced voice control"></a>SSML support for advanced voice control</h3><p>You can enhance the speech synthesis with SSML for better control:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">SpeakWithSSMLAsync</span>(<span class="params"><span class="built_in">string</span> text, SpeechConfig speechConfig, SpeechSynthesizer synthesizer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> ssml = <span class="string">$@&quot;</span></span><br><span class="line"><span class="string">    &lt;speak version=&#x27;1.0&#x27; xmlns=&#x27;http://www.w3.org/2001/10/synthesis&#x27; xml:lang=&#x27;en-US&#x27;&gt;</span></span><br><span class="line"><span class="string">        &lt;voice name=&#x27;<span class="subst">&#123;speechConfig.SpeechSynthesisVoiceName&#125;</span>&#x27;&gt;</span></span><br><span class="line"><span class="string">            &lt;prosody rate=&#x27;medium&#x27; pitch=&#x27;medium&#x27;&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">&#123;System.Security.SecurityElement.Escape(text)&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/prosody&gt;</span></span><br><span class="line"><span class="string">        &lt;/voice&gt;</span></span><br><span class="line"><span class="string">    &lt;/speak&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> synthesizer.SpeakSsmlAsync(ssml);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fine-tuning-barge-in-sensitivity"><a href="#Fine-tuning-barge-in-sensitivity" class="headerlink" title="Fine-tuning barge-in sensitivity"></a>Fine-tuning barge-in sensitivity</h3><p>The barge-in threshold is crucial for a good user experience. Too sensitive, and background noise triggers interruptions. Too high, and users can‚Äôt interrupt naturally:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;BargeInThreshold&quot;</span><span class="punctuation">:</span> <span class="number">0.02</span>  <span class="comment">// Start here and adjust based on your environment</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Values to try:</p><ul><li><strong>0.01</strong>: Very sensitive (good for quiet environments)</li><li><strong>0.02</strong>: Balanced (recommended starting point)</li><li><strong>0.05</strong>: Less sensitive (noisy environments)</li></ul><h3 id="Error-handling-and-resilience"><a href="#Error-handling-and-resilience" class="headerlink" title="Error handling and resilience"></a>Error handling and resilience</h3><p>The solution includes comprehensive error handling:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HandleErrorUpdate</span>(<span class="params">ConversationErrorUpdate errorUpdate</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ConsoleHelper.DisplayError(<span class="string">$&quot;‚ùå GPT-4o Error: <span class="subst">&#123;errorUpdate.Message&#125;</span>&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Log full error details for debugging</span></span><br><span class="line">    ConsoleHelper.DisplayError(<span class="string">$&quot;Full error details: <span class="subst">&#123;errorUpdate.GetRawContent()&#125;</span>&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Could implement retry logic here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">HandleSpeechStartedUpdate</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    ConversationInputSpeechStartedUpdate speechStartedUpdate, </span></span></span><br><span class="line"><span class="params"><span class="function">    SpeechSynthesizer? currentSynthesizer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ConsoleHelper.DisplayMessage(<span class="string">$&quot;üé§ Speech detected @ <span class="subst">&#123;speechStartedUpdate.AudioStartTime&#125;</span>&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Always stop current speech when user starts talking</span></span><br><span class="line">    <span class="keyword">if</span> (currentSynthesizer != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> currentSynthesizer.StopSpeakingAsync();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ConsoleHelper.DisplayError(<span class="string">$&quot;Error stopping speech: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Performance-considerations-and-optimization"><a href="#Performance-considerations-and-optimization" class="headerlink" title="Performance considerations and optimization"></a>Performance considerations and optimization</h2><h3 id="Latency-optimization"><a href="#Latency-optimization" class="headerlink" title="Latency optimization"></a>Latency optimization</h3><p>The hybrid approach adds minimal latency:</p><ul><li><strong>GPT-4o streaming</strong>: Near real-time text streaming</li><li><strong>Azure Speech synthesis</strong>: 100-300ms for typical responses</li><li><strong>Barge-in detection</strong>: &lt;50ms response time</li></ul><h3 id="Memory-management"><a href="#Memory-management" class="headerlink" title="Memory management"></a>Memory management</h3><p>The ring buffer implementation efficiently manages audio data:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ~10 seconds buffer to handle network variations</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">byte</span>[] _buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[BYTES_PER_SAMPLE * SAMPLES_PER_SECOND * CHANNELS * <span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="Concurrent-operations"><a href="#Concurrent-operations" class="headerlink" title="Concurrent operations"></a>Concurrent operations</h3><p>The solution handles multiple concurrent operations smoothly:</p><ul><li>Microphone input streaming to GPT-4o</li><li>Real-time text streaming from GPT-4o</li><li>Audio synthesis and playback via Azure Speech</li><li>Barge-in detection and response</li></ul><h2 id="Deployment-and-production-considerations"><a href="#Deployment-and-production-considerations" class="headerlink" title="Deployment and production considerations"></a>Deployment and production considerations</h2><h3 id="Security-best-practices"><a href="#Security-best-practices" class="headerlink" title="Security best practices"></a>Security best practices</h3><ol><li><strong>API key management</strong>: Use Azure Key Vault for production</li><li><strong>Network security</strong>: Implement proper firewall rules</li><li><strong>Authentication</strong>: Add user authentication for production apps</li></ol><h3 id="Scaling-considerations"><a href="#Scaling-considerations" class="headerlink" title="Scaling considerations"></a>Scaling considerations</h3><ol><li><strong>Connection limits</strong>: Both services have concurrent connection limits</li><li><strong>Regional deployment</strong>: Deploy Speech Services in the same region as OpenAI</li><li><strong>Cost optimization</strong>: Monitor token usage and synthesis characters</li></ol><h3 id="Monitoring-and-logging"><a href="#Monitoring-and-logging" class="headerlink" title="Monitoring and logging"></a>Monitoring and logging</h3><p>Implement comprehensive logging for production:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add structured logging</span></span><br><span class="line">services.AddLogging(builder =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    builder.AddConsole();</span><br><span class="line">    builder.AddApplicationInsights(); <span class="comment">// For production monitoring</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Conclusion-and-next-steps"><a href="#Conclusion-and-next-steps" class="headerlink" title="Conclusion and next steps"></a>Conclusion and next steps</h2><p>This hybrid approach solves the key limitations of GPT-4o Realtime‚Äôs built-in voices by providing:</p><p>‚úÖ <strong>Unlimited voice selection</strong>: Access to 400+ Azure Speech neural voices<br>‚úÖ <strong>Custom neural voice support</strong>: Use your own trained voices<br>‚úÖ <strong>Natural barge-in capability</strong>: Users can interrupt naturally<br>‚úÖ <strong>SSML support</strong>: Advanced voice control and customization<br>‚úÖ <strong>Production-ready architecture</strong>: Robust error handling and performance  </p><p>The complete sample code is available in my <code>custom-voice-sample-code</code> folder, which you can use as a starting point for your own applications.</p><h3 id="What‚Äôs-next"><a href="#What‚Äôs-next" class="headerlink" title="What‚Äôs next?"></a>What‚Äôs next?</h3><p>Consider these enhancements for your implementation:</p><ol><li><strong>Multiple voice support</strong>: Let users choose their preferred voice</li><li><strong>Emotion detection</strong>: Adjust voice characteristics based on conversation sentiment</li><li><strong>Multi-language support</strong>: Dynamically switch languages and voices</li><li><strong>Integration with Teams&#x2F;Bot Framework</strong>: Extend to enterprise chat platforms</li></ol><p>The combination of GPT-4o‚Äôs conversational intelligence with Azure Speech Services‚Äô voice flexibility opens up entirely new possibilities for voice-enabled applications. Whether you‚Äôre building customer service bots, educational tools, or therapeutic applications, this approach gives you the control and quality you need for professional deployments.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learn.microsoft.com/en-us/azure/ai-services/speech-service/custom-neural-voice">Azure Speech Services Custom Neural Voice</a></li><li><a href="https://speech.microsoft.com/portal/voicegallery">Azure Speech Services Voice Gallery</a></li><li><a href="https://github.com/naudio/NAudio">NAudio Documentation</a></li><li>Main image generated by <a href="https://openai.com/blog/dall-e/">DALL-E</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Hybrid GPT-4o Realtime with Azure Speech Services Custom Voices&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post demonstrates bypassing GPT-4o Realtime‚Äôs built-in voice limitations by creating a hybrid architecture that combines GPT-4o‚Äôs conversational intelligence with Azure Speech Services‚Äô extensive voice catalog. The solution configures GPT-4o Realtime for text-only output (&lt;code&gt;ContentModalities.Text&lt;/code&gt;) and routes responses through Azure Speech Services, enabling access to 400+ neural voices, custom neural voices (CNV), and SSML control. The implementation includes intelligent barge-in functionality using real-time audio amplitude monitoring, allowing users to interrupt the assistant naturally mid-response.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical implementation:&lt;/strong&gt; C# application using Azure.AI.OpenAI and Microsoft.CognitiveServices.Speech SDKs, NAudio for audio I&amp;#x2F;O, streaming text collection from GPT-4o responses, RMS-based speech detection with configurable thresholds, and concurrent audio management for seamless interruption handling. &lt;strong&gt;&lt;a href=&quot;https://github.com/Ricky-G/azure-scenario-hub/tree/main/custom-voice-sample-code&quot;&gt;Complete C# source code with audio helpers available here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Building realtime voice-enabled applications with Azure OpenAI‚Äôs GPT-4o Realtime model is incredibly powerful, but there‚Äôs one significant limitation that can be a deal-breaker for many use cases: you‚Äôre stuck with OpenAI‚Äôs predefined voices like ‚Äúsage‚Äù, ‚Äúalloy‚Äù, ‚Äúecho‚Äù, ‚Äúfable‚Äù, ‚Äúonyx‚Äù, and ‚Äúnova‚Äù. &lt;/p&gt;
&lt;p&gt;What if you‚Äôre building a branded customer service bot that needs to match your company‚Äôs voice identity? Or developing a therapeutic application for children with autism where the voice quality and tone are crucial for engagement? What if your users need to interrupt the assistant naturally, just like in real human conversations?&lt;/p&gt;
&lt;p&gt;In this comprehensive guide, I‚Äôll show you exactly how I solved these challenges by building a hybrid solution that combines the conversational intelligence of GPT-4o Realtime with the voice flexibility of Azure Speech Services. We‚Äôll dive deep into the implementation, covering everything from the initial problem to the complete working solution.&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;flowchart TD
    A[üë§ User speaks] --&gt; B[üé§ Microphone Input]
    B --&gt; C{Barge-in Detection&lt;br/&gt;Audio Level &gt; Threshold?}
    C --&gt;|Yes| D[üõë Stop Azure Speech]
    C --&gt;|No| E[üì° Stream to GPT-4o Realtime]
    
    E --&gt; F[üß† GPT-4o Processing]
    F --&gt; G[üìù Text Response&lt;br/&gt;ContentModalities.Text]
    
    G --&gt; H[üó£Ô∏è Azure Speech Services&lt;br/&gt;Custom/Neural Voice]
    H --&gt; I[üîä Audio Output]
    
    D --&gt; E
    I --&gt; J[üëÇ User hears response]
    J --&gt; A
    
    style A fill:#e1f5fe
    style D fill:#ffebee
    style G fill:#f3e5f5
    style H fill:#e8f5e8
    style I fill:#fff3e0&lt;/pre&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="AI" scheme="https://clouddev.blog/categories/Azure/AI/"/>
    
    <category term="Speech" scheme="https://clouddev.blog/categories/Azure/AI/Speech/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="OpenAI" scheme="https://clouddev.blog/tags/OpenAI/"/>
    
    <category term="Speech Services" scheme="https://clouddev.blog/tags/Speech-Services/"/>
    
    <category term="Realtime" scheme="https://clouddev.blog/tags/Realtime/"/>
    
    <category term="C#" scheme="https://clouddev.blog/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Ignoring Azurite Files</title>
    <link href="https://clouddev.blog/Azure/Storage/Azurite/ignoring-azurite-files/"/>
    <id>https://clouddev.blog/Azure/Storage/Azurite/ignoring-azurite-files/</id>
    <published>2024-02-22T11:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.052Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Managing Azurite Storage Emulation Files in VS Code</strong></p><p>Local development with Azure Functions often requires Azurite (Azure Storage Emulator replacement) which generates storage files that clutter VS Code workspace. Problem: <code>__azurite__</code>, <code>__blobstorage__</code>, and <code>__queuestorage__</code> directories appear in project explorer making navigation difficult. Solution: Configure VS Code <code>files.exclude</code> settings to hide these emulation artifacts while preserving their functionality for local development and testing.</p></blockquote><hr><p>In the old days, developers relied on the Azure Storage Emulator to emulate Azure Storage services locally. However, Azure Storage Emulator has been deprecated and replaced with <strong>Azurite</strong>, which is now the recommended way to emulate Azure Blob, Queue, and Table storage locally. In this post, let‚Äôs see how to set up exclusions in Visual Studio Code to prevent unwanted Azurite files from cluttering your workspace while working with Function Apps.</p><p><img src="/Azure/Storage/Azurite/ignoring-azurite-files/azurite-files.png" alt="Azurite files"></p><span id="more"></span><h2 id="Starting-Azurite-Services"><a href="#Starting-Azurite-Services" class="headerlink" title="Starting Azurite Services"></a>Starting Azurite Services</h2><p>In Visual Studio Code, you can start Azurite services</p><p><img src="/Azure/Storage/Azurite/ignoring-azurite-files/azurite-start.png" alt="Start Azurite"></p><h2 id="Visual-Studio-Code-Setting-Up-File-Exclusions"><a href="#Visual-Studio-Code-Setting-Up-File-Exclusions" class="headerlink" title="Visual Studio Code: Setting Up File Exclusions"></a>Visual Studio Code: Setting Up File Exclusions</h2><p>Azurite‚Äôs local emulation files, while essential, can quickly overpopulate your project. To keep them hidden, Visual Studio Code‚Äôs <code>files.exclude</code> feature allows you to filter them out. Here‚Äôs how to add the necessary configuration to hide these files.</p><ol><li>Open the <strong>settings.json</strong> file in your project.</li></ol><p><img src="/Azure/Storage/Azurite/ignoring-azurite-files/open-visual-studio-code-settings.png" alt="Open Visual Studio Code Settings"></p><ol start="2"><li>Add the following block to exclude Azurite files:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;files.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__azurite__&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;__blobstorage__&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;__queuestorage__&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>This will automatically hide Azurite-related files from the VS Code explorer.</p><p><img src="/Azure/Storage/Azurite/ignoring-azurite-files/settings-file-with-azurite-exclude.png" alt="Open Visual Studio Code Settings"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>By setting up file exclusions in Visual Studio Code and <code>.gitignore</code>, you can prevent clutter from unnecessary Azurite files. This streamlines your development process and keeps your project cleaner.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Thumbnail image <a href="https://azure.microsoft.com/svghandler/storage/?width=1280&height=720">was taken from Azure SVG icons</a></li><li>Main image generated by <a href="https://openai.com/blog/dall-e/">DALL-E</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Managing Azurite Storage Emulation Files in VS Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Local development with Azure Functions often requires Azurite (Azure Storage Emulator replacement) which generates storage files that clutter VS Code workspace. Problem: &lt;code&gt;__azurite__&lt;/code&gt;, &lt;code&gt;__blobstorage__&lt;/code&gt;, and &lt;code&gt;__queuestorage__&lt;/code&gt; directories appear in project explorer making navigation difficult. Solution: Configure VS Code &lt;code&gt;files.exclude&lt;/code&gt; settings to hide these emulation artifacts while preserving their functionality for local development and testing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;In the old days, developers relied on the Azure Storage Emulator to emulate Azure Storage services locally. However, Azure Storage Emulator has been deprecated and replaced with &lt;strong&gt;Azurite&lt;/strong&gt;, which is now the recommended way to emulate Azure Blob, Queue, and Table storage locally. In this post, let‚Äôs see how to set up exclusions in Visual Studio Code to prevent unwanted Azurite files from cluttering your workspace while working with Function Apps.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Azure/Storage/Azurite/ignoring-azurite-files/azurite-files.png&quot; alt=&quot;Azurite files&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="Storage" scheme="https://clouddev.blog/categories/Azure/Storage/"/>
    
    <category term="Azurite" scheme="https://clouddev.blog/categories/Azure/Storage/Azurite/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="Storage" scheme="https://clouddev.blog/tags/Storage/"/>
    
    <category term="Azurite" scheme="https://clouddev.blog/tags/Azurite/"/>
    
    <category term="Function Apps" scheme="https://clouddev.blog/tags/Function-Apps/"/>
    
    <category term="Logic Apps" scheme="https://clouddev.blog/tags/Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Extracting GZip &amp; Tar Files Natively in .NET Without External Libraries</title>
    <link href="https://clouddev.blog/Azure/Function-Apps/NET/extracting-gzip-tar-files-natively-in-net-without-external-libraries/"/>
    <id>https://clouddev.blog/Azure/Function-Apps/NET/extracting-gzip-tar-files-natively-in-net-without-external-libraries/</id>
    <published>2023-06-24T12:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.051Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Native .tar.gz Extraction in .NET 7 Without External Dependencies</strong></p><p>Processing compressed .tar.gz files in Azure Functions traditionally required external libraries like SharpZipLib. Problem: External dependencies increase complexity and security surface area. Solution: .NET 7 introduces native <code>System.Formats.Tar</code> namespace alongside existing <code>System.IO.Compression</code> for GZip, enabling complete .tar.gz extraction without external dependencies. Implementation uses <code>GZipStream</code> for decompression and <code>TarReader</code> for archive extraction with proper entry type filtering and async operations.</p></blockquote><hr><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Imagine being in a scenario where a file of type .tar.gz lands in your Azure Blob Storage container. This file, when uncompressed, yields a collection of individual files. The trigger event for the arrival of this file is an Azure function, which springs into action, decompressing the contents and transferring them into a different container.</p><p>In this context, a team may instinctively reach out for a robust library like SharpZipLib. However, what if there is a mandate to accomplish this without external dependencies? This becomes a reality with .NET 7.</p><p>In .NET 7, native support for Tar files has been introduced, and GZip is catered to via <code>System.IO.Compression</code>. This means we can decompress a .tar.gz file natively in .NET 7, bypassing any need for external libraries.</p><p>This post will walk you through this process, providing a practical example using .NET 7 to show how this can be achieved.</p><h2 id="NET-7-Native-TAR-Support"><a href="#NET-7-Native-TAR-Support" class="headerlink" title=".NET 7: Native TAR Support"></a>.NET 7: Native TAR Support</h2><p>As of .NET 7, the <code>System.Formats.Tar</code> namespace was introduced to deal with TAR files, adding to the toolkit of .NET developers:</p><ul><li><code>System.Formats.Tar.TarFile</code> to pack a directory into a TAR file or extract a TAR file to a directory</li><li><code>System.Formats.Tar.TarReader</code> to read a TAR file</li><li><code>System.Formats.Tar.TarWriter</code> to write a TAR file</li></ul><p>These new capabilities significantly simplify the process of working with TAR files in .NET. Lets dive in an have a look at a code sample that demonstrates how to extract a .tar.gz file natively in .NET 7.</p><span id="more"></span><h2 id="A-Simple-Example-In-NET-7"><a href="#A-Simple-Example-In-NET-7" class="headerlink" title="A Simple Example In .NET 7"></a>A Simple Example In .NET 7</h2><p>Below is an example demonstrating the extraction of a .tar.gz file natively in .NET 7 in a simple console app to extract the contents of a .tar.gz file to a directory</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.IO.Compression;</span><br><span class="line"><span class="keyword">using</span> System.Formats.Tar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> sourceTarGzFilePath = <span class="string">@&quot;C:\_Temp\test.tar.gz&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> targetDirectory = <span class="string">@&quot;C:\_Temp\ExtractedFiles\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> tarFilePath = Path.ChangeExtension(sourceTarGzFilePath, <span class="string">&quot;.tar&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Directory.CreateDirectory(targetDirectory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Decompress the .gz file</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream originalFileStream = File.OpenRead(sourceTarGzFilePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (FileStream decompressedFileStream = File.Create(tarFilePath))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (GZipStream decompressionStream = <span class="keyword">new</span> GZipStream(originalFileStream, CompressionMode.Decompress))</span><br><span class="line">                &#123;</span><br><span class="line">                    decompressionStream.CopyTo(decompressedFileStream);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Extract the .tar file</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream tarStream = File.OpenRead(tarFilePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (TarReader tarReader = <span class="keyword">new</span> TarReader(tarStream))</span><br><span class="line">            &#123;</span><br><span class="line">                TarEntry entry;</span><br><span class="line">                <span class="keyword">while</span> ((entry = tarReader.GetNextEntryAsync().Result) != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (entry.EntryType <span class="keyword">is</span> TarEntryType.SymbolicLink <span class="keyword">or</span> TarEntryType.HardLink <span class="keyword">or</span> TarEntryType.GlobalExtendedAttributes)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Extracting <span class="subst">&#123;entry.Name&#125;</span>&quot;</span>);</span><br><span class="line">                    entry.ExtractToFileAsync(Path.Combine(targetDirectory, entry.Name), <span class="literal">true</span>).Wait();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete the temporary .tar file</span></span><br><span class="line">        File.Delete(tarFilePath);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Extraction Completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can also find this on <a href="https://gist.github.com/Ricky-G/5562922ca29ab8f8a349dc07917d65af">GitHub Gist</a>.</p><h2 id="Wrapping-Up"><a href="#Wrapping-Up" class="headerlink" title="Wrapping Up"></a>Wrapping Up</h2><p>The introduction of System.Formats.Tar in .NET 7 marks a significant milestone for developers dealing with .tar.gz files. It provides us with the ability to decompress these file types natively, without relying on external libraries. This functionality is a game-changer as it reduces complexity, minimizes external dependencies, and enhances the versatility of .NET applications.</p><p>The new namespace <code>System.Formats.Tar</code>, along with the established <code>System.IO.Compression</code>, effectively handle TAR and GZip files. This considerably simplifies the process, making the .NET environment more self-contained and versatile.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Thumbnail image [was taken from the DotNet brand repo]<a href="https://github.com/dotnet/brand">https://github.com/dotnet/brand</a>)</li><li>Main image generated by [was taken from the DotNet brand repo]<a href="https://github.com/dotnet/brand">https://github.com/dotnet/brand</a>)</li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Native .tar.gz Extraction in .NET 7 Without External Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Processing compressed .tar.gz files in Azure Functions traditionally required external libraries like SharpZipLib. Problem: External dependencies increase complexity and security surface area. Solution: .NET 7 introduces native &lt;code&gt;System.Formats.Tar&lt;/code&gt; namespace alongside existing &lt;code&gt;System.IO.Compression&lt;/code&gt; for GZip, enabling complete .tar.gz extraction without external dependencies. Implementation uses &lt;code&gt;GZipStream&lt;/code&gt; for decompression and &lt;code&gt;TarReader&lt;/code&gt; for archive extraction with proper entry type filtering and async operations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Imagine being in a scenario where a file of type .tar.gz lands in your Azure Blob Storage container. This file, when uncompressed, yields a collection of individual files. The trigger event for the arrival of this file is an Azure function, which springs into action, decompressing the contents and transferring them into a different container.&lt;/p&gt;
&lt;p&gt;In this context, a team may instinctively reach out for a robust library like SharpZipLib. However, what if there is a mandate to accomplish this without external dependencies? This becomes a reality with .NET 7.&lt;/p&gt;
&lt;p&gt;In .NET 7, native support for Tar files has been introduced, and GZip is catered to via &lt;code&gt;System.IO.Compression&lt;/code&gt;. This means we can decompress a .tar.gz file natively in .NET 7, bypassing any need for external libraries.&lt;/p&gt;
&lt;p&gt;This post will walk you through this process, providing a practical example using .NET 7 to show how this can be achieved.&lt;/p&gt;
&lt;h2 id=&quot;NET-7-Native-TAR-Support&quot;&gt;&lt;a href=&quot;#NET-7-Native-TAR-Support&quot; class=&quot;headerlink&quot; title=&quot;.NET 7: Native TAR Support&quot;&gt;&lt;/a&gt;.NET 7: Native TAR Support&lt;/h2&gt;&lt;p&gt;As of .NET 7, the &lt;code&gt;System.Formats.Tar&lt;/code&gt; namespace was introduced to deal with TAR files, adding to the toolkit of .NET developers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.Formats.Tar.TarFile&lt;/code&gt; to pack a directory into a TAR file or extract a TAR file to a directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Formats.Tar.TarReader&lt;/code&gt; to read a TAR file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Formats.Tar.TarWriter&lt;/code&gt; to write a TAR file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These new capabilities significantly simplify the process of working with TAR files in .NET. Lets dive in an have a look at a code sample that demonstrates how to extract a .tar.gz file natively in .NET 7.&lt;/p&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="Function Apps" scheme="https://clouddev.blog/categories/Azure/Function-Apps/"/>
    
    <category term=".NET" scheme="https://clouddev.blog/categories/Azure/Function-Apps/NET/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="Azure Blob Storage" scheme="https://clouddev.blog/tags/Azure-Blob-Storage/"/>
    
    <category term=".NET" scheme="https://clouddev.blog/tags/NET/"/>
    
    <category term="GZip" scheme="https://clouddev.blog/tags/GZip/"/>
    
    <category term="Tar" scheme="https://clouddev.blog/tags/Tar/"/>
    
  </entry>
  
  <entry>
    <title>Unzipping and Shuffling GBs of Data Using Azure Functions</title>
    <link href="https://clouddev.blog/Azure/Function-Apps/unzipping-and-shuffling-gbs-of-data-using-azure-functions/"/>
    <id>https://clouddev.blog/Azure/Function-Apps/unzipping-and-shuffling-gbs-of-data-using-azure-functions/</id>
    <published>2023-05-18T12:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.054Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Stream-Based Large File Processing in Azure Functions</strong></p><p>Processing multi-gigabyte zip files in Azure Functions requires streaming approach due to 1.5GB memory limit on Consumption plan. Problem: Large compressed files cannot be loaded entirely into memory for extraction. Solution: Stream-based unzipping using blob triggers with two implementation options: native .NET ZipArchive (slower but dependency-free) vs SharpZipLib (faster with custom buffer sizes). Architecture includes separate blob containers for zipped&#x2F;unzipped files with Function App triggered by blob storage events for scalable data processing.</p></blockquote><hr><p>Consider this situation: you have a zip file stored in an Azure Blob Storage container (or any other location for that matter). This isn‚Äôt just any zip file; it‚Äôs large, containing gigabytes of data. It could be big data sets for your machine learning projects, log files, media files, or backups. The specific content isn‚Äôt the focus - the size is.</p><p>The task? We need to unzip this massive file(s) and relocate its contents to a different Azure Blob storage container. This task might seem daunting, especially considering the size of the file and the potential number of files that might be housed within it.</p><p>Why do we need to do this? The use cases are numerous. Handling large data sets, moving data for analysis, making backups more accessible - these are just a few examples. The key here is that we‚Äôre looking for a scalable and reliable solution to handle this task efficiently.</p><p><strong>Azure Data Factory is arguably a better fit for this sort of task, but In this blog post, we will specifically demonstrate how to establish this process using Azure Functions</strong>. Specifically we will try to achieve this within the constraints of the Consumption plan tier, where the maximum memory is capped at 1.5GB, with the supporting roles of Azure CLI and PowerShell in our setup.</p><h2 id="Setting-Up-Our-Azure-Environment"><a href="#Setting-Up-Our-Azure-Environment" class="headerlink" title="Setting Up Our Azure Environment"></a>Setting Up Our Azure Environment</h2><p>Before we dive into scripting and code, we need to set the stage - that means setting up our Azure environment. We‚Äôre going to create a storage account with two containers, one for our Zipped files and the other for Unzipped files.</p><p>To create this setup, we‚Äôll be using the Azure CLI. Why? Because it‚Äôs efficient and lets us script out the whole process if we need to do it again in the future.</p><ol><li><p>Install Azure CLI: If you haven‚Äôt already installed Azure CLI on your local machine, <a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli">you can get it from here</a>.</p></li><li><p>Login to Azure: Open your terminal and type the following command to login to your Azure account. You‚Äôll be prompted to enter your credentials.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az login    </span><br></pre></td></tr></table></figure></li><li><p>Create a Resource Group: We‚Äôll need a Resource Group to keep our resources organized. We‚Äôll call this rg-function-app-unzip-test and create it in the eastus location (you can ofcourse choose which ever region you like).</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az group create --name rg-function-app-unzip-test --location eastus    </span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>Create a Storage Account: Next, we‚Äôll create a storage account within our Resource Group. We‚Äôll name it unziptststorageacct.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az storage account create --name unziptststorageacct --resource-group rg-function-app-unzip-test --location eastus --sku Standard_LRS    </span><br></pre></td></tr></table></figure></li><li><p>Create the Blob Containers: Finally, we‚Äôll create our two containers, ‚ÄòZipped‚Äô and ‚ÄòUnzipped‚Äô in the unziptststorageacct storage account.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">az storage container create --name zipped --account-name unziptststorageacct</span><br><span class="line">az storage container create --name unzipped --account-name unziptststorageacct    </span><br></pre></td></tr></table></figure><p>Now your Azure environment is ready with the specific resource group and storage account names you provided! We‚Äôve got our storage account unziptststorageacct and two containers ‚ÄòZipped‚Äô and ‚ÄòUnzipped‚Äô set up for our operations. The next step is to create our zip file.</p></li></ol><h2 id="Concocting-Our-Data-With-PowerShell"><a href="#Concocting-Our-Data-With-PowerShell" class="headerlink" title="Concocting Our Data With PowerShell"></a>Concocting Our Data With PowerShell</h2><p>Our next task is to create a large zip file filled with multiple 100MB files, all brimming with random text. In a real world scenario you would already have these large files, but since we are simulating lets use PowerShell to create them.</p><article class="message is-success">                <div class="message-body">            <p>If you already have an existing zip file with large‚Äôish files for testing, you can skip this step and use that file instead.</p>        </div>    </article><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set the number of files we want to create</span></span><br><span class="line"><span class="variable">$fileCount</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The path where you want to create the TestFiles directory</span></span><br><span class="line"><span class="variable">$directory</span> = <span class="string">&quot;C:\_Temp\TestFiles&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new directory for our files if it doesn&#x27;t already exist</span></span><br><span class="line"><span class="keyword">if</span>(<span class="operator">-not</span> (<span class="built_in">Test-Path</span> <span class="literal">-Path</span> <span class="variable">$directory</span>))&#123;</span><br><span class="line">    <span class="built_in">New-Item</span> <span class="literal">-ItemType</span> Directory <span class="literal">-Path</span> <span class="variable">$directory</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop through and create our files</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> <span class="operator">-le</span> <span class="variable">$fileCount</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="comment"># Generate a 100MB file filled with random text and save it in our new directory</span></span><br><span class="line">    <span class="variable">$fileContent</span> = <span class="built_in">New-Object</span> byte[] <span class="number">104857600</span></span><br><span class="line">    (<span class="built_in">New-Object</span> Random).NextBytes(<span class="variable">$fileContent</span>)</span><br><span class="line">    [<span class="type">System.IO.File</span>]::WriteAllBytes(<span class="string">&quot;<span class="variable">$directory</span>\File<span class="variable">$i</span>.txt&quot;</span>, <span class="variable">$fileContent</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now that we have all our files, let&#x27;s zip them up</span></span><br><span class="line"><span class="built_in">Compress-Archive</span> <span class="literal">-Path</span> <span class="string">&quot;<span class="variable">$directory</span>\*&quot;</span> <span class="literal">-DestinationPath</span> <span class="string">&quot;<span class="variable">$directory</span>.zip&quot;</span></span><br></pre></td></tr></table></figure><p>This is a simple script that is creating 10 files, each 100MB in size, and then zipping them up into a single file. The resulting zip file should be around the 1GB in size.</p><blockquote><p>Incase you are wondering how we end up with a 1GB+ file by compressing 1GB worth of data? we are generating files filled with random bytes. Compression algorithms work by finding and eliminating redundancy in the data. Since random data has no redundancy, it cannot be compressed. In fact, trying to compress random data can even result in output that is slightly larger than the input, due to the overhead of the compression format.</p></blockquote><p>We‚Äôll use this file to test our Azure Function.</p><h2 id="Azure-Function-To-Unzip"><a href="#Azure-Function-To-Unzip" class="headerlink" title="Azure Function To Unzip"></a>Azure Function To Unzip</h2><p>We‚Äôre going to create a Function that magically springs into action the moment a blob (our zipped file) lands in the ‚ÄòZipped‚Äô container. This function will stream the data, unzip the files, and stores them neatly as individual files in the ‚ÄòUnzipped‚Äô container.</p><p>Before we begin, ensure that you‚Äôve installed the <a href="https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4,windows,csharp,portal,bash#v2">Azure Functions Core Tools</a> locally. You‚Äôd also need the <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions">Azure Functions Extension for Visual Studio Code</a>.</p><p>First lets use the CLI to create our consumption plan function app. We‚Äôll call it unzipfunctionapp and use the unziptststorageacct storage account we created earlier. We‚Äôll also specify the runtime as dotnet and the functions version as 4. We are using the consumption plan to demonstrate that this solution can work within the constraints of the consumption plan, where the maximum memory is capped at 1.5GB.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az functionapp create --resource-group rg-function-app-unzip-test --consumption-plan-location eastus --runtime dotnet --functions-version 4 --name unzipfunctionapp123 --storage-account unziptststorageacct</span><br></pre></td></tr></table></figure><article class="message is-warning">                <div class="message-body">            <p>You might need to change the function name in the example about from ‚Äòunzipfunctionapp123‚Äô. This could already be taken; this is because, Azure function app name must have Globally unique name.<br>When you create Azure function app, you specify the name which becomes part of URL <azurefunctionname>.azurewebsites.net</p><p>If the function app name is already taken you will get an error ‚ÄòWebsite with given name unzipfunctionapp already exists.‚Äô when you run the cli command above.</p>        </div>    </article><p>Now that we have a consumption plan function infra, lets see the full code that will do the actual task of unzipping and uploading<br>There are two code samples and both are quite similar in their basic approach. They both handle the data in a streaming manner, which allows them to deal with large files without consuming a lot of memory.</p><p>However, there are some differences in the details of how they handle the streaming, which may have implications for their performance and resource usage:</p><blockquote><ul><li>The first code sample uses the ZipArchive class from the .NET Framework, which provides a high-level, user-friendly interface for dealing with zip files. The second code sample uses the ZipInputStream class from the SharpZipLib library, which provides a lower-level, more flexible interface.</li><li>In the first code sample, the ZipArchive automatically takes care of reading from the blob stream and unzipping the data. It provides an Open method for each entry in the zip file, which returns a stream that you can read the unzipped data from. In the second code sample, you manually read from the ZipInputStream and write to the blob stream using the StreamUtils.Copy method.</li><li>The second code sample manually handles the buffer size with new byte[4096] for copying data from the zip input stream to the blob output stream. In contrast, the first code sample relies on the default buffer size provided by the UploadFromStreamAsync method.</li></ul></blockquote><article class="message is-warning">                <div class="message-body">            <p>Memory wise both are similar (i.e.: they don‚Äôt download the entire zip file into memory), but the first script takes around 20 minutes to process a 1GB zip file (with 10 * 100 MB files), whereas the second script takes about 10 minutes for the same 1GB zip file.  This mainly comes down to setting the custom buffer size and the optimizations in the SharpZipLib library</p><p> First script has the benefit of not importing any custom library, but cant not run on an Azure consumption plan, at the time of this writing, consumption plan has a max 10 minute runtime.<br> Second script can potentially run on a consumption plan, but comes at a cost of having to import a 3rd party library.</p>        </div>    </article><script src="//gist.github.com/Ricky-G/a9d670728a4f554b1234e4cb3ee74189.js"></script><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Thumbnail image <a href="https://azure.microsoft.com/svghandler">was taken from the Azure site</a></li><li>Main image generated by <a href="https://openai.com/blog/dall-e/">DALL-E</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Stream-Based Large File Processing in Azure Functions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Processing multi-gigabyte zip files in Azure Functions requires streaming approach due to 1.5GB memory limit on Consumption plan. Problem: Large compressed files cannot be loaded entirely into memory for extraction. Solution: Stream-based unzipping using blob triggers with two implementation options: native .NET ZipArchive (slower but dependency-free) vs SharpZipLib (faster with custom buffer sizes). Architecture includes separate blob containers for zipped&amp;#x2F;unzipped files with Function App triggered by blob storage events for scalable data processing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Consider this situation: you have a zip file stored in an Azure Blob Storage container (or any other location for that matter). This isn‚Äôt just any zip file; it‚Äôs large, containing gigabytes of data. It could be big data sets for your machine learning projects, log files, media files, or backups. The specific content isn‚Äôt the focus - the size is.&lt;/p&gt;
&lt;p&gt;The task? We need to unzip this massive file(s) and relocate its contents to a different Azure Blob storage container. This task might seem daunting, especially considering the size of the file and the potential number of files that might be housed within it.&lt;/p&gt;
&lt;p&gt;Why do we need to do this? The use cases are numerous. Handling large data sets, moving data for analysis, making backups more accessible - these are just a few examples. The key here is that we‚Äôre looking for a scalable and reliable solution to handle this task efficiently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Azure Data Factory is arguably a better fit for this sort of task, but In this blog post, we will specifically demonstrate how to establish this process using Azure Functions&lt;/strong&gt;. Specifically we will try to achieve this within the constraints of the Consumption plan tier, where the maximum memory is capped at 1.5GB, with the supporting roles of Azure CLI and PowerShell in our setup.&lt;/p&gt;
&lt;h2 id=&quot;Setting-Up-Our-Azure-Environment&quot;&gt;&lt;a href=&quot;#Setting-Up-Our-Azure-Environment&quot; class=&quot;headerlink&quot; title=&quot;Setting Up Our Azure Environment&quot;&gt;&lt;/a&gt;Setting Up Our Azure Environment&lt;/h2&gt;&lt;p&gt;Before we dive into scripting and code, we need to set the stage - that means setting up our Azure environment. We‚Äôre going to create a storage account with two containers, one for our Zipped files and the other for Unzipped files.&lt;/p&gt;
&lt;p&gt;To create this setup, we‚Äôll be using the Azure CLI. Why? Because it‚Äôs efficient and lets us script out the whole process if we need to do it again in the future.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Azure CLI: If you haven‚Äôt already installed Azure CLI on your local machine, &lt;a href=&quot;https://learn.microsoft.com/en-us/cli/azure/install-azure-cli&quot;&gt;you can get it from here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Login to Azure: Open your terminal and type the following command to login to your Azure account. You‚Äôll be prompted to enter your credentials.&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;az login    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a Resource Group: We‚Äôll need a Resource Group to keep our resources organized. We‚Äôll call this rg-function-app-unzip-test and create it in the eastus location (you can ofcourse choose which ever region you like).&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;az group create --name rg-function-app-unzip-test --location eastus    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="Function Apps" scheme="https://clouddev.blog/categories/Azure/Function-Apps/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="Function Apps" scheme="https://clouddev.blog/tags/Function-Apps/"/>
    
    <category term="PowerShell" scheme="https://clouddev.blog/tags/PowerShell/"/>
    
    <category term="Azure Blob Storage" scheme="https://clouddev.blog/tags/Azure-Blob-Storage/"/>
    
    <category term="Azure CLI" scheme="https://clouddev.blog/tags/Azure-CLI/"/>
    
  </entry>
  
  <entry>
    <title>Azure DevTest Labs Policies</title>
    <link href="https://clouddev.blog/Azure/DevTest-Labs/azure-devtest-labs-policies/"/>
    <id>https://clouddev.blog/Azure/DevTest-Labs/azure-devtest-labs-policies/</id>
    <published>2023-01-31T11:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.051Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: DevTest Labs Policy Configuration with Bicep IaC</strong></p><p>Azure DevTest Labs documentation covers basic lab deployment but lacks policy configuration examples in Bicep. Problem: Missing guidance on linking policies to DevTest Labs using Infrastructure as Code. Solution: Use <code>Microsoft.DevTestLab/labs/policysets</code> resource with ‚Äòdefault‚Äô name as parent for policy definitions. Implementation includes VM size restrictions, user VM quotas, and premium SSD limits using evaluator types like <code>AllowedValuesPolicy</code> and <code>MaxValuePolicy</code> with proper threshold configurations.</p></blockquote><hr><p>Azure DevTest Labs offers a powerful cloud-based development workstation environment and great alternative to a local development workstation&#x2F;laptop when it comes to software development. This blog post is not so much talking about the benefits of DevTest Lab, but more about how to create policies for DevTest Labs using Bicep.  Although there is a good support for <a href="https://learn.microsoft.com/en-us/azure/templates/microsoft.devtestlab/labs?pivots=deployment-language-bicep">deploying DevTest labs with Bicep</a>, there is little to no documentation when it comes to creating policies for DevTest Labs in Bicep. In this blog post, we will focus on creating policies for DevTest Labs using Bicep and how to go about doing this.</p><h2 id="A-Brief-Overview-of-Azure-DevTest-Labs"><a href="#A-Brief-Overview-of-Azure-DevTest-Labs" class="headerlink" title="A Brief Overview of Azure DevTest Labs"></a>A Brief Overview of Azure DevTest Labs</h2><p>Azure DevTest Labs is a managed service that enables developers to quickly create, manage, and share development and test environments. It provides a range of features and tools designed to streamline the development process, minimize costs, and improve overall productivity. By leveraging the power of the cloud, developers can easily spin up virtual machines (VMs) pre-configured with the necessary tools, frameworks, and software needed for their projects.</p><h2 id="Existing-Documentation-Limitations"><a href="#Existing-Documentation-Limitations" class="headerlink" title="Existing Documentation Limitations"></a>Existing Documentation Limitations</h2><p>While the existing documentation covers various aspects of Azure DevTest Labs, it lacks clear guidance on setting up policies with DevTest Labs in Bicep. This blog post aims to address that gap by providing a Bicep script for creating a DevTest Lab and applying policies to it. Shout out to my colleague <a href="https://www.linkedin.com/in/illian-yuan">Illian Y</a> for persisting and not giving up and finding a away around undocumented features and showing me.</p><span id="more"></span><h2 id="Existing-Documentation-For-Creating-a-DevTest-Lab"><a href="#Existing-Documentation-For-Creating-a-DevTest-Lab" class="headerlink" title="Existing Documentation For Creating a DevTest Lab"></a>Existing Documentation For Creating a DevTest Lab</h2><p><a href="https://learn.microsoft.com/en-us/azure/templates/microsoft.devtestlab/labs?pivots=deployment-language-bicep">The existing documentation</a> for creating a DevTest Lab is pretty good, but when it comes to creating <a href="https://learn.microsoft.com/en-us/azure/templates/microsoft.devtestlab/labs/policysets/policies?pivots=deployment-language-bicep">policies for DevTest Lab</a> this is where the documentation falls short.  The documentation does not provide a Bicep script for creating policies for DevTest Labs.</p><h2 id="Vanilla-DevTest-Lab"><a href="#Vanilla-DevTest-Lab" class="headerlink" title="Vanilla DevTest Lab"></a>Vanilla DevTest Lab</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">resource lab &#x27;Microsoft.DevTestLab/labs@<span class="number">2018</span><span class="number">-09</span><span class="number">-15</span>&#x27; = <span class="punctuation">&#123;</span></span><br><span class="line">  name<span class="punctuation">:</span> &#x27;testLab&#x27;</span><br><span class="line">  location<span class="punctuation">:</span> &#x27;australiacentral&#x27;</span><br><span class="line">  tags<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    tagName1<span class="punctuation">:</span> &#x27;test-tag&#x27;</span><br><span class="line">    tagName2<span class="punctuation">:</span> &#x27;test-tag1&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  properties<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    environmentPermission<span class="punctuation">:</span> &#x27;Contributor&#x27;</span><br><span class="line">    labStorageType<span class="punctuation">:</span> &#x27;Premium&#x27;</span><br><span class="line">    mandatoryArtifactsResourceIdsLinux<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    mandatoryArtifactsResourceIdsWindows<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    premiumDataDisks<span class="punctuation">:</span> &#x27;Disabled&#x27;</span><br><span class="line">    announcement<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      enabled<span class="punctuation">:</span> &#x27;Disabled&#x27;</span><br><span class="line">      expired<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    support<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      enabled<span class="punctuation">:</span> &#x27;Enabled&#x27;</span><br><span class="line">      markdown<span class="punctuation">:</span> &#x27;Test&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Creating-Policies-for-DevTest-Labs-in-Bicep"><a href="#Creating-Policies-for-DevTest-Labs-in-Bicep" class="headerlink" title="Creating Policies for DevTest Labs in Bicep"></a>Creating Policies for DevTest Labs in Bicep</h2><p>The documentation states all the possible policies that can be created under the fact name in <a href="https://learn.microsoft.com/en-us/azure/templates/microsoft.devtestlab/labs/policysets/policies?pivots=deployment-language-bicep#policyproperties">PolicyProperties</a></p><p>Below is a list of three of those policies that can be created in Bicep.</p><ul><li>Allowed VM Sizes</li><li>Allowed VMs Per User</li><li>Allowed Premium SSD Per User</li></ul><h3 id="Linking-the-policies-to-the-DevTest-Labs"><a href="#Linking-the-policies-to-the-DevTest-Labs" class="headerlink" title="Linking the policies to the DevTest Labs"></a>Linking the policies to the DevTest Labs</h3><p>This is the important glue that is missing from the documentation, how to link the policies to the DevTest Labs.  The way to do this is to create a resource policySetParent and link it to the DevTest Labs. The policySetParent resource is then used as the parent for the policies.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource policySetParent &#x27;Microsoft.DevTestLab/labs/policysets@<span class="number">2018</span><span class="number">-09</span><span class="number">-15</span>&#x27; existing = <span class="punctuation">&#123;</span></span><br><span class="line">  parent<span class="punctuation">:</span> lab</span><br><span class="line">  name<span class="punctuation">:</span> &#x27;default&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Allowed-VM-Sizes"><a href="#Allowed-VM-Sizes" class="headerlink" title="Allowed VM Sizes"></a>Allowed VM Sizes</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource allowedVmSizesPolicies &#x27;Microsoft.DevTestLab/labs/policysets/policies@<span class="number">2018</span><span class="number">-09</span><span class="number">-15</span>&#x27; = <span class="punctuation">&#123;</span></span><br><span class="line">  name<span class="punctuation">:</span> &#x27;allowedVmSizesPolicy&#x27;</span><br><span class="line">  location<span class="punctuation">:</span> location</span><br><span class="line">  parent<span class="punctuation">:</span> policySetParent</span><br><span class="line">  properties<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    evaluatorType<span class="punctuation">:</span> &#x27;AllowedValuesPolicy&#x27;</span><br><span class="line">    factName<span class="punctuation">:</span> &#x27;LabVmSize&#x27;</span><br><span class="line">    status<span class="punctuation">:</span> &#x27;Enabled&#x27;</span><br><span class="line">    threshold<span class="punctuation">:</span> &#x27;<span class="punctuation">[</span><span class="string">&quot;Standard_D4_v2&quot;</span><span class="punctuation">,</span><span class="string">&quot;Standard_E4_v2&quot;</span><span class="punctuation">]</span>&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Allowed-VM‚Äôs-per-user"><a href="#Allowed-VM‚Äôs-per-user" class="headerlink" title="Allowed VM‚Äôs per user"></a>Allowed VM‚Äôs per user</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource allowedVmsPerUserPolicies &#x27;Microsoft.DevTestLab/labs/policysets/policies@<span class="number">2018</span><span class="number">-09</span><span class="number">-15</span>&#x27; = <span class="punctuation">&#123;</span></span><br><span class="line">  name<span class="punctuation">:</span> &#x27;allowedVmsPerUserPolicy&#x27;</span><br><span class="line">  location<span class="punctuation">:</span> location</span><br><span class="line">  parent<span class="punctuation">:</span> policySetParent</span><br><span class="line">  properties<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    evaluatorType<span class="punctuation">:</span> &#x27;MaxValuePolicy&#x27;</span><br><span class="line">    factName<span class="punctuation">:</span> &#x27;UserOwnedLabVmCount&#x27;</span><br><span class="line">    status<span class="punctuation">:</span> &#x27;Enabled&#x27;</span><br><span class="line">    threshold<span class="punctuation">:</span> &#x27;<span class="number">4</span>&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Allowed-Premium-SSD-Per-User"><a href="#Allowed-Premium-SSD-Per-User" class="headerlink" title="Allowed Premium SSD Per User"></a>Allowed Premium SSD Per User</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource allowedPremiumSSDPerUserPolicies &#x27;Microsoft.DevTestLab/labs/policysets/policies@<span class="number">2018</span><span class="number">-09</span><span class="number">-15</span>&#x27; = <span class="punctuation">&#123;</span></span><br><span class="line">  name<span class="punctuation">:</span> &#x27;allowedPremiumSSDPerUserPolicy&#x27;</span><br><span class="line">  location<span class="punctuation">:</span> location</span><br><span class="line">  parent<span class="punctuation">:</span> policySetParent</span><br><span class="line">  properties<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    evaluatorType<span class="punctuation">:</span> &#x27;MaxValuePolicy&#x27;</span><br><span class="line">    factName<span class="punctuation">:</span> &#x27;UserOwnedLabPremiumVmCount&#x27;</span><br><span class="line">    status<span class="punctuation">:</span> &#x27;Enabled&#x27;</span><br><span class="line">    threshold<span class="punctuation">:</span> &#x27;<span class="number">4</span>&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Main &amp;  thumbnail image <a href="https://azure.microsoft.com/">was taken from the Azure site</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: DevTest Labs Policy Configuration with Bicep IaC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Azure DevTest Labs documentation covers basic lab deployment but lacks policy configuration examples in Bicep. Problem: Missing guidance on linking policies to DevTest Labs using Infrastructure as Code. Solution: Use &lt;code&gt;Microsoft.DevTestLab/labs/policysets&lt;/code&gt; resource with ‚Äòdefault‚Äô name as parent for policy definitions. Implementation includes VM size restrictions, user VM quotas, and premium SSD limits using evaluator types like &lt;code&gt;AllowedValuesPolicy&lt;/code&gt; and &lt;code&gt;MaxValuePolicy&lt;/code&gt; with proper threshold configurations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Azure DevTest Labs offers a powerful cloud-based development workstation environment and great alternative to a local development workstation&amp;#x2F;laptop when it comes to software development. This blog post is not so much talking about the benefits of DevTest Lab, but more about how to create policies for DevTest Labs using Bicep.  Although there is a good support for &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/templates/microsoft.devtestlab/labs?pivots=deployment-language-bicep&quot;&gt;deploying DevTest labs with Bicep&lt;/a&gt;, there is little to no documentation when it comes to creating policies for DevTest Labs in Bicep. In this blog post, we will focus on creating policies for DevTest Labs using Bicep and how to go about doing this.&lt;/p&gt;
&lt;h2 id=&quot;A-Brief-Overview-of-Azure-DevTest-Labs&quot;&gt;&lt;a href=&quot;#A-Brief-Overview-of-Azure-DevTest-Labs&quot; class=&quot;headerlink&quot; title=&quot;A Brief Overview of Azure DevTest Labs&quot;&gt;&lt;/a&gt;A Brief Overview of Azure DevTest Labs&lt;/h2&gt;&lt;p&gt;Azure DevTest Labs is a managed service that enables developers to quickly create, manage, and share development and test environments. It provides a range of features and tools designed to streamline the development process, minimize costs, and improve overall productivity. By leveraging the power of the cloud, developers can easily spin up virtual machines (VMs) pre-configured with the necessary tools, frameworks, and software needed for their projects.&lt;/p&gt;
&lt;h2 id=&quot;Existing-Documentation-Limitations&quot;&gt;&lt;a href=&quot;#Existing-Documentation-Limitations&quot; class=&quot;headerlink&quot; title=&quot;Existing Documentation Limitations&quot;&gt;&lt;/a&gt;Existing Documentation Limitations&lt;/h2&gt;&lt;p&gt;While the existing documentation covers various aspects of Azure DevTest Labs, it lacks clear guidance on setting up policies with DevTest Labs in Bicep. This blog post aims to address that gap by providing a Bicep script for creating a DevTest Lab and applying policies to it. Shout out to my colleague &lt;a href=&quot;https://www.linkedin.com/in/illian-yuan&quot;&gt;Illian Y&lt;/a&gt; for persisting and not giving up and finding a away around undocumented features and showing me.&lt;/p&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="DevTest Labs" scheme="https://clouddev.blog/categories/Azure/DevTest-Labs/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="Azure Dev Test Labs" scheme="https://clouddev.blog/tags/Azure-Dev-Test-Labs/"/>
    
    <category term="Developer Environments" scheme="https://clouddev.blog/tags/Developer-Environments/"/>
    
    <category term="Azure Policy" scheme="https://clouddev.blog/tags/Azure-Policy/"/>
    
  </entry>
  
  <entry>
    <title>Azure Logic Apps Timeout</title>
    <link href="https://clouddev.blog/Azure/Logic-Apps/azure-logic-apps-timeout/"/>
    <id>https://clouddev.blog/Azure/Logic-Apps/azure-logic-apps-timeout/</id>
    <published>2022-10-19T11:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.051Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Timeout Control Strategies for Azure Logic Apps</strong></p><p>Logic Apps default timeout behavior doesn‚Äôt match production requirements with HTTP triggers timing out at 3.9 minutes and workflow duration defaulting to 90 days. Problem: No granular timeout control per workflow causing long-running processes in production. Solutions: Global <code>Runtime.Backend.FlowRunTimeout</code> setting (minimum 7 days, affects all workflows) or per-workflow timeout branches using parallel ‚ÄúDelay‚Äù action with terminate condition for precise timeout control without impacting other workflows.</p></blockquote><hr><p>Recently I got pulled into a production incident where a logic app was running for a long time (long time in this scenario was &gt; 10 minutes), but the intention from the dev crew was they wanted this to time out in 60 seconds.  These logic apps were a combination of HTTP triggers and Timer based.</p><h2 id="Logic-App-Default-Time-Limits"><a href="#Logic-App-Default-Time-Limits" class="headerlink" title="Logic App Default Time Limits"></a>Logic App Default Time Limits</h2><p>First things to keep in mind are some default limits.</p><ol><li><p>If its a HTTP based trigger the <a href="https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#timeout-duration">default timeout is around 3.9 minutes</a></p></li><li><p>For most others the <a href="https://learn.microsoft.com/en-us/azure/logic-apps/edit-app-settings-host-settings?tabs=azure-portal#run-duration-and-history-retention">default max run duration of a logic app is 90 days and min is 7 days</a></p></li></ol><h2 id="Ways-To-Change-Defaults"><a href="#Ways-To-Change-Defaults" class="headerlink" title="Ways To Change Defaults"></a>Ways To Change Defaults</h2><p>With that, here are a couple of quick ways to make sure your Logic App times out and terminates within the time frame you set. Lets say if we want our Logic App to run no more than 60 seconds at max then:</p><span id="more"></span><ol><li>You can change the setting <a href="https://learn.microsoft.com/en-us/azure/logic-apps/edit-app-settings-host-settings?tabs=azure-portal#run-duration-and-history-retention#:~:text=Runtime.Backend.FlowRunTimeout">Runtime.Backend.FlowRunTimeout</a> from the default 90 days to 7 days (keep in mind the minimum for this setting is 7 days which is quite large, refer to this issue : <a href="https://github.com/Azure/logicapps/issues/782#issuecomment-1609008805">https://github.com/Azure/logicapps/issues/782#issuecomment-1609008805</a>)</li></ol><blockquote><ul><li>PRO: This will make sure that the Logic App runs for a maximum of 7 days only (which is quite large)</li><li>CON: However this will apply to all the Logic Apps in the host&#x2F;tenant, meaning if you had 15 logic apps then all 15 will have the 7 day limit</li></ul></blockquote><ol start="2"><li>Have a branch with in the Logic App itself to control the timeout (shown in the below diagram)</li></ol><blockquote><ul><li>PRO: You have full control of timeout per Logic App, so some can have 30 second time outs while others 60 seconds etc</li><li>CON: There will be an extra branch&#x2F;logic in your logic app</li></ul></blockquote><h2 id="Time-Out-Branch-In-Logic-App"><a href="#Time-Out-Branch-In-Logic-App" class="headerlink" title="Time-Out Branch In Logic App"></a>Time-Out Branch In Logic App</h2><p>Below is how a potential timeout out setting in a Logic App could look like.  You create a ‚ÄúDelay‚Äù branch and set the desired time limit, in the example below its 2 minutes so if the other flow takes longer than two minutes then the delay will finish, logic app will be terminated and a cancelled status will be returned to the user in the below example.  Shout out to my colleague <a href="https://www.linkedin.com/in/johnbilliris">John B</a> for this awesome idea.</p><p><img src="/Azure/Logic-Apps/azure-logic-apps-timeout/logic-apps-timeout.png" alt=" " title="Single Threaded Container Apps"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Main image <a href="https://azure.microsoft.com/en-us/products/logic-apps/">was taken from the Azure site</a></li><li>Thumbnail image <a href="https://azure.microsoft.com/svghandler/logic-apps/?width=1280&height=720">was taken from Azure SVG icons</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Timeout Control Strategies for Azure Logic Apps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Logic Apps default timeout behavior doesn‚Äôt match production requirements with HTTP triggers timing out at 3.9 minutes and workflow duration defaulting to 90 days. Problem: No granular timeout control per workflow causing long-running processes in production. Solutions: Global &lt;code&gt;Runtime.Backend.FlowRunTimeout&lt;/code&gt; setting (minimum 7 days, affects all workflows) or per-workflow timeout branches using parallel ‚ÄúDelay‚Äù action with terminate condition for precise timeout control without impacting other workflows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Recently I got pulled into a production incident where a logic app was running for a long time (long time in this scenario was &amp;gt; 10 minutes), but the intention from the dev crew was they wanted this to time out in 60 seconds.  These logic apps were a combination of HTTP triggers and Timer based.&lt;/p&gt;
&lt;h2 id=&quot;Logic-App-Default-Time-Limits&quot;&gt;&lt;a href=&quot;#Logic-App-Default-Time-Limits&quot; class=&quot;headerlink&quot; title=&quot;Logic App Default Time Limits&quot;&gt;&lt;/a&gt;Logic App Default Time Limits&lt;/h2&gt;&lt;p&gt;First things to keep in mind are some default limits.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If its a HTTP based trigger the &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#timeout-duration&quot;&gt;default timeout is around 3.9 minutes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For most others the &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/logic-apps/edit-app-settings-host-settings?tabs=azure-portal#run-duration-and-history-retention&quot;&gt;default max run duration of a logic app is 90 days and min is 7 days&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Ways-To-Change-Defaults&quot;&gt;&lt;a href=&quot;#Ways-To-Change-Defaults&quot; class=&quot;headerlink&quot; title=&quot;Ways To Change Defaults&quot;&gt;&lt;/a&gt;Ways To Change Defaults&lt;/h2&gt;&lt;p&gt;With that, here are a couple of quick ways to make sure your Logic App times out and terminates within the time frame you set. Lets say if we want our Logic App to run no more than 60 seconds at max then:&lt;/p&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="Logic Apps" scheme="https://clouddev.blog/categories/Azure/Logic-Apps/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="Azure Logic Apps" scheme="https://clouddev.blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Create A Multi User Experience For Single Threaded Applications Using Azure Container Apps</title>
    <link href="https://clouddev.blog/Azure/Container-Apps/create-a-multi-user-experience-for-single-threaded-applications-using-azure-container-apps/"/>
    <id>https://clouddev.blog/Azure/Container-Apps/create-a-multi-user-experience-for-single-threaded-applications-using-azure-container-apps/</id>
    <published>2022-09-11T12:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.055Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Simulating Multi-User Experience for Legacy Single-Threaded Apps</strong></p><p>Legacy single-threaded applications (one request per process) require multi-user support without costly re-architecture. Problem: Applications with static locks block entire process during request handling. Solution: Azure Container Apps with HTTP-based scaling rules that spawn new container instances per concurrent request. Configuration uses min-replicas&#x3D;0, max-replicas&#x3D;30 with HTTP scale triggers, achieving 70-90% request isolation across separate container instances for pseudo-multithreaded behavior without code changes.</p></blockquote><hr><p>How to make a single-threaded app multi-threaded? This is the scenario I faced very recently. These were legacy web app(s) written to be single-threaded; in this context single-threaded means can only serve one request at a time. <strong>I know this goes against everything that a web app should be</strong>, but it what it is.</p><p>So if we have a single threaded web app (legacy) now all of a sudden we have a requirement to support multiple users at the same time. What are our options:</p><ol><li>Re-architect the app to be multi threaded</li><li>Find a way to simulate multi threaded behavior</li></ol><p>Both are great options, but in this scenario option 1 was out, due to the cost involved in re-writing this app to support multi threading.  So that leaves us with option 2; how can we at a cloud infra level <strong>easily</strong> simulate multi threaded behavior. Turns out if we containerize the app (in this case it was easy enough to do) we orchestrate the app such that for each http request is routed to a new container (ie: every new http request should spin up a new container and request send to it)</p><h2 id="Options-For-Running-Containers"><a href="#Options-For-Running-Containers" class="headerlink" title="Options For Running Containers"></a>Options For Running Containers</h2><p>So when it comes to running a container in Azure our main options are below<br><img src="/Azure/Container-Apps/create-a-multi-user-experience-for-single-threaded-applications-using-azure-container-apps/container-options.png" alt=" " title="Container Options"></p><span id="more"></span><p>Here we need to orchestrate containers, ie: at a minimum for every new http request spin a new one), which means we only have two viable options, Azure Kubernetes Service (AKS) or Azure Container Apps (ACA).  Both are valid options, each with their own pros&#x2F;cons, with AKS its a lot more complex we will need to :</p><blockquote><ul><li>Think of networking</li><li>Think of vm‚Äôs&#x2F;vm scale sets for nodes</li><li>Choose ingress controller and set up ingress rules</li><li>Identity</li><li>Plus many more, <a href="https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/containers/aks/baseline-aks#network-topology">here is the baseline reference for AKS</a></li></ul></blockquote><p>So in short, as flexible as AKS is its not as easy as something like ACA which is a fully managed version of AKS that abstracts all the complexities of Kubernetes. So for this scenario to prove we can simulate multi threaded experience lets go ahead with ACA.</p><h2 id="Sample-Single-Threaded-Program"><a href="#Sample-Single-Threaded-Program" class="headerlink" title="Sample Single Threaded Program"></a>Sample Single Threaded Program</h2><p>For this demo below is a simple C# DotNet app that simulates a single threaded behavior, essentially its doing a lock on a static variable which blocks the whole process for 6 seconds. So when we visit the &#x2F;test endpoint we lock the whole app.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> LockObject = <span class="keyword">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add services to the container.</span></span><br><span class="line">        builder.Services.AddAuthorization();</span><br><span class="line"></span><br><span class="line">        builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">        builder.Services.AddSwaggerGen();</span><br><span class="line"></span><br><span class="line">        builder.Services.AddApplicationInsightsTelemetry();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Configure the HTTP request pipeline.</span></span><br><span class="line">        <span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">        &#123;</span><br><span class="line">            app.UseSwagger();</span><br><span class="line">            app.UseSwaggerUI();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">        app.MapGet(<span class="string">&quot;/test&quot;</span>, (HttpContext httpContext) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Monitor.TryEnter(LockObject, <span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Thread.Sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Monitor.Exit(LockObject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (<span class="string">&quot;Hello From Container: &quot;</span> + System.Environment.MachineName);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        app.Run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Azure-Container-Apps"><a href="#Azure-Container-Apps" class="headerlink" title="Azure Container Apps"></a>Azure Container Apps</h2><p>For this demo the easiest way to create the Azure Container Apps environment is through Visual Studio, you right click, publish and go through the menus and in the end VS will create a Container Apps Environment and deploy the code as a container to ACA.<br><img src="/Azure/Container-Apps/create-a-multi-user-experience-for-single-threaded-applications-using-azure-container-apps/azure-container-app-create.png" alt=" " title="Single Threaded Container Apps"></p><p>Once this is all done, we should have a resource group like below<br><img src="/Azure/Container-Apps/create-a-multi-user-experience-for-single-threaded-applications-using-azure-container-apps/container-apps-resource-group.png" alt=" " title="Container Apps Resource Group"></p><h2 id="Azure-Container-Apps-Scaling"><a href="#Azure-Container-Apps-Scaling" class="headerlink" title="Azure Container Apps Scaling"></a>Azure Container Apps Scaling</h2><p>Next we go to the container app (the single threaded api we just deployed) and set up a simple http scale rule that will spin up a new container for every 1 http incoming request.  In the example below we set min-replicas to 0 and max to 30 this means that when there is no traffic it will scale down to 0 and at peak it will hit 30.<br><img src="/Azure/Container-Apps/create-a-multi-user-experience-for-single-threaded-applications-using-azure-container-apps/container-options.png" alt=" " title="Container Apps Resource Group"></p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>Now go to the url of the container app and hit it simultaneously in browser tabs, when I opened it in multiple browser tabs out of 10 tabs about 7 were served by unique containers and based on the test code above I see it being served by different container ids</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tab1<span class="punctuation">:</span> Hello From Container<span class="punctuation">:</span> single-threaded-api-app<span class="number">-20220731</span>--ps4yjjp<span class="number">-66</span>f4885b65-w5s6h</span><br><span class="line">Tab2<span class="punctuation">:</span> Hello From Container<span class="punctuation">:</span> single-threaded-api-app<span class="number">-20220731</span>--ps4yjjp<span class="number">-66</span>f4885b65-gs8qf</span><br><span class="line">Tab3<span class="punctuation">:</span> Hello From Container<span class="punctuation">:</span> single-threaded-api-app<span class="number">-20220731</span>--ps4yjjp<span class="number">-66</span>f4885b65-x7grl</span><br><span class="line">etc</span><br></pre></td></tr></table></figure><p>So its not 100% every single request goes to a brand new container, but very easily and very quickly with out too much complexity we were able to achieve a 70 - 90% of requests being served with new containers, so in essence we found a quick way to simulate a pseudo - multi threaded experience for our legacy single threaded app with out too much effort.</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Simulating Multi-User Experience for Legacy Single-Threaded Apps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Legacy single-threaded applications (one request per process) require multi-user support without costly re-architecture. Problem: Applications with static locks block entire process during request handling. Solution: Azure Container Apps with HTTP-based scaling rules that spawn new container instances per concurrent request. Configuration uses min-replicas&amp;#x3D;0, max-replicas&amp;#x3D;30 with HTTP scale triggers, achieving 70-90% request isolation across separate container instances for pseudo-multithreaded behavior without code changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;How to make a single-threaded app multi-threaded? This is the scenario I faced very recently. These were legacy web app(s) written to be single-threaded; in this context single-threaded means can only serve one request at a time. &lt;strong&gt;I know this goes against everything that a web app should be&lt;/strong&gt;, but it what it is.&lt;/p&gt;
&lt;p&gt;So if we have a single threaded web app (legacy) now all of a sudden we have a requirement to support multiple users at the same time. What are our options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Re-architect the app to be multi threaded&lt;/li&gt;
&lt;li&gt;Find a way to simulate multi threaded behavior&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both are great options, but in this scenario option 1 was out, due to the cost involved in re-writing this app to support multi threading.  So that leaves us with option 2; how can we at a cloud infra level &lt;strong&gt;easily&lt;/strong&gt; simulate multi threaded behavior. Turns out if we containerize the app (in this case it was easy enough to do) we orchestrate the app such that for each http request is routed to a new container (ie: every new http request should spin up a new container and request send to it)&lt;/p&gt;
&lt;h2 id=&quot;Options-For-Running-Containers&quot;&gt;&lt;a href=&quot;#Options-For-Running-Containers&quot; class=&quot;headerlink&quot; title=&quot;Options For Running Containers&quot;&gt;&lt;/a&gt;Options For Running Containers&lt;/h2&gt;&lt;p&gt;So when it comes to running a container in Azure our main options are below&lt;br&gt;&lt;img src=&quot;/Azure/Container-Apps/create-a-multi-user-experience-for-single-threaded-applications-using-azure-container-apps/container-options.png&quot; alt=&quot; &quot; title=&quot;Container Options&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="Container Apps" scheme="https://clouddev.blog/categories/Azure/Container-Apps/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="Azure Container Apps" scheme="https://clouddev.blog/tags/Azure-Container-Apps/"/>
    
    <category term="Containers" scheme="https://clouddev.blog/tags/Containers/"/>
    
    <category term="Docker" scheme="https://clouddev.blog/tags/Docker/"/>
    
    <category term="DotNet" scheme="https://clouddev.blog/tags/DotNet/"/>
    
    <category term="Single Threaded Apps" scheme="https://clouddev.blog/tags/Single-Threaded-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Application Gateway Ingress Controller For AKS</title>
    <link href="https://clouddev.blog/AKS/AGIC/application-gateway-ingress-controller-for-aks/"/>
    <id>https://clouddev.blog/AKS/AGIC/application-gateway-ingress-controller-for-aks/</id>
    <published>2022-08-19T12:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.054Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: AGIC Direct Pod Ingress for High-Performance AKS Workloads</strong></p><p>AGIC provides direct pod ingress bypassing Kubernetes ClusterIP for up to 50% lower network latency compared to in-cluster solutions. Problem: Traditional ingress controllers add network hops and consume AKS compute resources. Solution: Application Gateway routes directly to pod IPs via Azure Resource Manager integration, offering WAF, SSL termination, and managed updates as AKS add-on. Critical limitation: 100 backend pool limit means 2000+ services require 20 Application Gateways, making cost-effective deployment challenging for large-scale clusters.</p></blockquote><hr><p>Recently I ran into an interesting issue with an AKS cluster running 2000+ services.  There is nothing wrong in running 2000+ services that‚Äôs what Kubernetes is there for, scale!  but the interesting aspect that caught my attention was trying to get the Applicaiton Gateway Ingress Controller (AGIC) to ingress to all these services. I had worked with Istio and NGINX for ingress into AKS with no issues and never AGIC, so I had to try this to see where it worked well, what the advantages are and where the limitations are.</p><h2 id="Application-Gateway"><a href="#Application-Gateway" class="headerlink" title="Application Gateway"></a>Application Gateway</h2><p>Application Gateway (App Gateway) is a well-established layer 7 service that has been around for a while, some of the major features are:</p><ul><li>URL routing</li><li>Cookie-based affinity</li><li>SSL termination</li><li>End-to-end SSL</li><li>Support for public, private, and hybrid web sites</li><li>Integrated web application firewall</li><li>Zone redundancy</li><li>Connection draining</li></ul><p>This post isn‚Äôt focused on the App Gateway itself, it‚Äôs more about how and what it can do as an ingress controller for AKS. <a href="https://docs.microsoft.com/en-us/azure/application-gateway/features">You can find out more about App Gateway and all abouts its features here</a></p><span id="more"></span><h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR;"></a>TLDR;</h2><h3 id="Benefits-of-AGIC"><a href="#Benefits-of-AGIC" class="headerlink" title="Benefits of AGIC"></a>Benefits of AGIC</h3><blockquote><ul><li>Direct connection to the pods without an extra hop, <a href="https://azure.microsoft.com/en-au/blog/application-gateway-ingress-controller-for-azure-kubernetes-service/#:~:text=Solution%20performance">this results in a performance benefit up to 50% lower network latency compared to in-cluster ingress</a></li><li>Could make a huge difference in performance and latency sensitive applications and workloads</li><li>If going the AKS add-on route then it becomes fully managed and updated</li><li>In cluster ingress consumes and competes for AKS compute&#x2F;memory resources where was with App Gateway separated from the cluster it won‚Äôt be leeching any of the AKS compute</li><li>Full benefits of the Application Gateway such as WAF, cookie-based affinity, ssl termination amongst many others</li></ul></blockquote><h4 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h4><blockquote><ul><li><a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#application-gateway-limits">Application Gateway has some backend limits.  Backend pools are limited to 100.</a></li><li><a href="https://azure.microsoft.com/en-us/pricing/details/application-gateway/#pricing">Application Gateway does have a pricing implication</a></li><li>Routing is directly to pod IP‚Äôs rather than the ClusterIP of the service.  <a href="https://github.com/Azure/application-gateway-kubernetes-ingress/issues/1427">There is a feature request open for this</a></li></ul></blockquote><h3 id="Application-Gateway-Ingress-Controller-AGIC"><a href="#Application-Gateway-Ingress-Controller-AGIC" class="headerlink" title="Application Gateway Ingress Controller (AGIC)"></a>Application Gateway Ingress Controller (AGIC)</h3><p>AGIC went to GA around the end of 2019 and offered the possibilities of hooking up an App Gateway as an attractive alternative for ingress into an AKS cluster.  Before moving any further with AGIC, we need to understand at a high-level how networking works in AKS.</p><p>There are two main network models:</p><ol><li><p>Kubenet networking</p><blockquote><ul><li>Default option for Kubernetes out of the box</li><li>Each Node receives an IP from the Azure virtual network subnet</li><li>Pods in the node are not associated to the Azure vnet, they are assigned an IP address from the <em>PodIPCidr</em> and a route table is created by AKS</li></ul></blockquote></li><li><p>Azure Container Networking Interface networking (CNI)</p><blockquote><ul><li>Each pod itself receives an IPaddress from the Azure virtual network subnet</li><li>Pods can be directly reached via their private IP from connected networks</li><li>Pods can access resources in the vnet directly with out issues (e.g.: function app in the same vnet)</li></ul></blockquote></li></ol><p>It‚Äôs important to note, once you create an AKS cluster with a given network model you can‚Äôt change it; you will have to create a new one. <a href="https://docs.microsoft.com/en-us/azure/aks/concepts-network#compare-network-models">There are advantages and disadvantages in both models which are listed in detail in this link</a>.</p><p>One key consideration to highlight is:</p><ul><li>Kubenet - &#x2F;24 IP range can support up to 251 nodes (each subnet reserves the first 3 IP addresses for management operations).  Given the maximum nodes per pod in Kubenet is 110, this configuration can support a maximum of 251 * 110 &#x3D; 27,610 pods</li><li>CNI - the same &#x2F;24 IP range can support a maximum of 8 nodes (CNI has a max of thirty pods per node). So, this configuration can support a maximum of 240</li></ul><p>When it comes to CNI you will have to plan for the IP addresses, you might need to a &#x2F;16 range to get a bigger node count.  <a href="https://docs.microsoft.com/en-us/azure/aks/configure-kubenet#limitations--considerations-for-kubenet">There are also limitations with the kubenet that will need to be taken into consideration</a>.</p><p>With the AKS networking models out of the way, let‚Äôs look at AGIC; regardless of which model is chosen, the goal for AGIC is to ingress directly to the pod, a simple representation of this can be seen below.  AGIC when deployed, runs in a pod in the AKS cluster and watches for changes, when changes are detected (i.e.: a new pod has been added or existing pod removed) these IP changes are propagated to the App Gateway via the Azure Resource Manager.</p><div class="mxgraph-container">    <div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:false,&quot;page&quot;:0,&quot;toolbar&quot;:&quot;lightbox zoom layers pages&quot;,&quot;url&quot;:&quot;https://raw.githubusercontent.com/Ricky-G/draw-io/main/AGIC-Ingress-AKS.drawio&quot;}"></div></div><p>If we went with the CNI networking model, then the pod would get IP address from the vnet and there would be a mapping in the App Gateway.  Alternatively, with the Kubenet model <a href="https://azure.github.io/application-gateway-kubernetes-ingress/how-tos/networking/#with-kubenet">this is how App Gateway will be setup</a>, it will try to assign the same routable created by AKS to App Gateway‚Äôs subnet.</p><p>It‚Äôs important to note, whichever model you choose the App Gateway will always connect directly to the pod and this is by design.</p><h2 id="Deploying-AGIC"><a href="#Deploying-AGIC" class="headerlink" title="Deploying AGIC"></a>Deploying AGIC</h2><p>AGIC can be deployed in two ways <a href="https://docs.microsoft.com/en-us/azure/application-gateway/ingress-controller-overview#difference-between-helm-deployment-and-AKS-add-on">either using Helm or as an AKS add-on</a>. Each has their pros and cons, the key benefit of going via an AKS add-on will be that it will be fully managed and auto updated by Azure (i.e.: all updates, patching etc. for the AGIC will be taken care of automatically) whereas with Helm you will have to do that yourself.</p><p>Let‚Äôs go ahead and deploy a demo AKS cluster with AGIC and see it in action to understand exactly what is going on. For the sake of simplicity, this demo will be creating an AKS cluster with CNI networking model and deploying the AGIC as and AKS add-on.</p><h3 id="Create-an-AKS-cluster"><a href="#Create-an-AKS-cluster" class="headerlink" title="Create an AKS cluster"></a>Create an AKS cluster</h3><p><strong>Login and set the right subscription</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">az login</span><br><span class="line">az account <span class="built_in">set</span> -s <span class="string">&quot;your-subcription-id&quot;</span></span><br></pre></td></tr></table></figure><p><strong>Create a new resource group</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az group create --name agicTestResourceGroup --location eastus</span><br></pre></td></tr></table></figure><p>Here we are creating a new AKS cluster with CNI networking model (‚Äìnetwork-plugin azure) and we are setting up App Gateway as ingress and in this instance we are saying our App Gateway‚Äôs name is ‚ÄútestAppGateway‚Äù which doesn‚Äôt exist and will be created for us</p><p><strong>Create AKS cluster</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az aks create -n agicTestCluster -g agicTestResourceGroup --network-plugin azure --enable-managed-identity -a ingress-appgw --appgw-name testAppGateway --appgw-subnet-cidr <span class="string">&quot;10.225.0.0/16&quot;</span> --generate-ssh-keys</span><br></pre></td></tr></table></figure><p>If we go into the Azure Portal, we can see two resource groups (one of them is what we created and this where the Azure managed AKS control plane is), the other resource group (MC_agicTestResourceGroup_agicTestCluster_eastus) is where the node pool, vnet, App Gateway etc all live, this resource group gets created automatically for us as part of the <em>az aks create</em> command.</p><p><img src="/AKS/AGIC/application-gateway-ingress-controller-for-aks/aks-resource-group.png" alt=" " title="AKS Resource Group"></p><p><img src="/AKS/AGIC/application-gateway-ingress-controller-for-aks/app-gateway-resource-group.png" alt=" " title="App Gateway Resource Group"></p><h2 id="Deploy-a-sample-API"><a href="#Deploy-a-sample-API" class="headerlink" title="Deploy a sample API"></a>Deploy a sample API</h2><p>Now we have the AKS cluster up and running with AGIC deployed as an add-on, let‚Äôs deploy a sample API app and set ingress through the App Gateway.</p><p><strong>Get credentials to the AKS cluster</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az aks get-credentials -n agicTestCluster -g agicTestResourceGroup</span><br></pre></td></tr></table></figure><p><strong>Deploy a sample API</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://gist.githubusercontent.com/Ricky-G/59eb109913bd45d3e9229f9cf0a97edc/raw/b336047feecd9fd89fbe1a9627ac385b525124fe/sample-api-aks-deployment.yaml</span><br></pre></td></tr></table></figure><p>The above sample API deployment yaml was taken from the <a href="https://github.com/Azure/application-gateway-kubernetes-ingress/blob/master/docs/examples/aspnetapp.yaml">AGIC GitHub repo</a>, the only change made to it was added a minimum of 10 replicas.  We are saying we need 10 pods running this API. As soon as you run this you should see the app deployed as a service and 10 pods running successfully and there is a cluster-IPIP set for this (cluster-IP is an IP load balancer that Kubernetes creates, we just need to call this IP and our traffic will be forwarded to one of the 10 pods)</p><p><img src="/AKS/AGIC/application-gateway-ingress-controller-for-aks/sample-api-sevice.png" alt=" " title="Service Deployed to AKS"></p><p>Now if we go to the resource group where we have the actual Application Gateway and go to backend pool, we can see there is one here created by AGIC and if we dig into the pool all the IP addresses of the 10 pods are listed here.  So, we have direct ingress to the pods from the Application Gateway.</p><p><img src="/AKS/AGIC/application-gateway-ingress-controller-for-aks/app-gateway-backend-pool.png" alt=" " title="Application Gateway Backend Pool"></p><p>Finally, if we run the below command, we should see an ingress IP address for ‚Äúaspnetapp‚Äù which is our sample API.  This is the public IP of the Application Gateway, which has been wired up to ingress all the way to the pod.  If we paste this IP into the browser, we can see sample aspnet site served from the pod.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ingress</span><br></pre></td></tr></table></figure><p>Right, so we have successfully ingressed all the way from public ip going via Application Gateway all the way to our pod.</p><h2 id="Benefits-of-AGIC-1"><a href="#Benefits-of-AGIC-1" class="headerlink" title="Benefits of AGIC"></a>Benefits of AGIC</h2><ul><li>Direct connection to the pods without an extra hop, <a href="https://azure.microsoft.com/en-au/blog/application-gateway-ingress-controller-for-azure-kubernetes-service/#:~:text=Solution%20performance">this results in a performance benefit up to 50% lower network latency compared to in-cluster ingress</a></li><li>Could make a huge difference in performance and latency sensitive applications and workloads</li><li>If going the AKS add-on route then it becomes fully managed and updated</li><li>In cluster ingress consumes and competes for AKS compute&#x2F;memory resources where was with App Gateway separated from the cluster it won‚Äôt be leeching any of the AKS compute</li><li>Full benefits of the Application Gateway such as WAF, cookie-based affinity, ssl termination amongst many others</li></ul><h2 id="Limitations-1"><a href="#Limitations-1" class="headerlink" title="Limitations"></a>Limitations</h2><ul><li><a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#application-gateway-limits">Application Gateway has some backend limits. Backend pools are limited to 100.</a></li><li><a href="https://azure.microsoft.com/en-us/pricing/details/application-gateway/#pricing">Application Gateway does have a pricing implication</a></li><li>Routing is directly to pod IP‚Äôs rather than the ClusterIP of the service.  <a href="https://github.com/Azure/application-gateway-kubernetes-ingress/issues/1427">There is a feature request open for this</a></li></ul><h2 id="Closing-Thoughts"><a href="#Closing-Thoughts" class="headerlink" title="Closing Thoughts"></a>Closing Thoughts</h2><p>Key thing to keep in mind is the backend pool limitation of 100 .  If you have more than 100 ‚Äúingres-able‚Äù services, then you would need multiple Application Gateway‚Äôs to cater for this.  Although it is a supported scenario and straightforward to set up multiple App Gateways for one AKS cluster, your costs will pile up.</p><p>At the start of this post, I mentioned a scenario of 2000+ services, in this case we would need 20 App Gateways; 2000 services &#x2F; 100 &#x3D; 20. Due to cost implications this won‚Äôt be palatable in most cases.</p><p>On the plus side you get direct connection to the pod and can shave 50% of network latency. So, in this 2000+ services in one cluster scenario we could put the App Gateway as ingress for just latency sensitive apps&#x2F;API‚Äôs and use another traditional in cluster-based ingress for all the other services.  This way you get the best of both words while still keeping below the App Gateway max backend pool limits.</p><p>One neat option for an in cluster-based ingress could be <a href="https://docs.microsoft.com/en-us/azure/aks/web-app-routing">Web Application Routing</a>, which is still in preview at the time of writing this.  It‚Äôs a managed NGINX based solution that should work well as an in cluster-based ingress controller</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://azure.microsoft.com/en-au/blog/application-gateway-ingress-controller-for-azure-kubernetes-service/">AGIC main documentation</a></li><li><a href="https://azure.github.io/application-gateway-kubernetes-ingress/">AGIC GitHub</a></li><li>Main image <a href="https://azure.microsoft.com/svghandler/application-gateway">was taken from the Azure site</a> and slightly modified</li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: AGIC Direct Pod Ingress for High-Performance AKS Workloads&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AGIC provides direct pod ingress bypassing Kubernetes ClusterIP for up to 50% lower network latency compared to in-cluster solutions. Problem: Traditional ingress controllers add network hops and consume AKS compute resources. Solution: Application Gateway routes directly to pod IPs via Azure Resource Manager integration, offering WAF, SSL termination, and managed updates as AKS add-on. Critical limitation: 100 backend pool limit means 2000+ services require 20 Application Gateways, making cost-effective deployment challenging for large-scale clusters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Recently I ran into an interesting issue with an AKS cluster running 2000+ services.  There is nothing wrong in running 2000+ services that‚Äôs what Kubernetes is there for, scale!  but the interesting aspect that caught my attention was trying to get the Applicaiton Gateway Ingress Controller (AGIC) to ingress to all these services. I had worked with Istio and NGINX for ingress into AKS with no issues and never AGIC, so I had to try this to see where it worked well, what the advantages are and where the limitations are.&lt;/p&gt;
&lt;h2 id=&quot;Application-Gateway&quot;&gt;&lt;a href=&quot;#Application-Gateway&quot; class=&quot;headerlink&quot; title=&quot;Application Gateway&quot;&gt;&lt;/a&gt;Application Gateway&lt;/h2&gt;&lt;p&gt;Application Gateway (App Gateway) is a well-established layer 7 service that has been around for a while, some of the major features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL routing&lt;/li&gt;
&lt;li&gt;Cookie-based affinity&lt;/li&gt;
&lt;li&gt;SSL termination&lt;/li&gt;
&lt;li&gt;End-to-end SSL&lt;/li&gt;
&lt;li&gt;Support for public, private, and hybrid web sites&lt;/li&gt;
&lt;li&gt;Integrated web application firewall&lt;/li&gt;
&lt;li&gt;Zone redundancy&lt;/li&gt;
&lt;li&gt;Connection draining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post isn‚Äôt focused on the App Gateway itself, it‚Äôs more about how and what it can do as an ingress controller for AKS. &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/application-gateway/features&quot;&gt;You can find out more about App Gateway and all abouts its features here&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="AKS" scheme="https://clouddev.blog/categories/AKS/"/>
    
    <category term="AGIC" scheme="https://clouddev.blog/categories/AKS/AGIC/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="AKS" scheme="https://clouddev.blog/tags/AKS/"/>
    
    <category term="Ingress" scheme="https://clouddev.blog/tags/Ingress/"/>
    
    <category term="AGIC" scheme="https://clouddev.blog/tags/AGIC/"/>
    
    <category term="Application Gateway" scheme="https://clouddev.blog/tags/Application-Gateway/"/>
    
    <category term="Kubernetes" scheme="https://clouddev.blog/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Deploying To IP Restricted Azure Function Apps Using GitHub Actions</title>
    <link href="https://clouddev.blog/GitHub/Actions/deploying-to-ip-restricted-azure-function-apps-using-github-actions/"/>
    <id>https://clouddev.blog/GitHub/Actions/deploying-to-ip-restricted-azure-function-apps-using-github-actions/</id>
    <published>2022-08-06T12:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.054Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Dynamic IP Management for CI&#x2F;CD to Secured Azure Functions</strong></p><p>IP-restricted Function Apps block GitHub Actions runners causing HTTP 403 deployment failures since runners use dynamic IP addresses. Problem: Cannot whitelist entire GitHub IP range due to frequent changes. Solution: Dynamic IP management in GitHub Actions workflow using Azure CLI to temporarily add runner IP to SCM site access restrictions, deploy code, then remove IP. Implementation uses <code>ipify</code> API for IP detection, <code>--use-same-restrictions-for-scm-site false</code> for SCM isolation, and automated cleanup to maintain security posture.</p></blockquote><hr><a href="/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/" title="Securing Azure Functions and Logic Apps">In the previous post we blocked our function app to be available only to the APIM via ip restrictions</a>. <p>This secures our function app and it isn‚Äôt available publicly, any one that tries to access our function app url will get ‚ÄúHTTP 403 Forbidden‚Äù.</p><p>This secures our function app; now what about deploying code changes to the function app via GitHub Actions? we should be able to CI&#x2F;CD to our function app, but there is a problem here. The GitHub action will fail with the same ‚ÄúHTTP 403 Forbidden‚Äù, this is because GitHub actions run on runners (its a hosted virtual environment), each time we run the Action we get a new runner and it can have a different ip address.  So how can we get around this? <a href="https://api.github.com/meta">do we white list the entire GitHub ip range?</a></p><p>GitHub‚Äôs ip ranges can change any time, so will have to keep scanning for changes to these ranges and proactively update our ip restrictions, this is not very scalable or practical. So what are other ways of getting around this? we have a couple of ways to get around this.</p><h2 id="Possible-Solutions"><a href="#Possible-Solutions" class="headerlink" title="Possible Solutions"></a>Possible Solutions</h2><p>There are two viable solutions here</p><span id="more"></span><h3 id="1-Use-a-self-hosted-runner"><a href="#1-Use-a-self-hosted-runner" class="headerlink" title="1. Use a self-hosted runner"></a>1. Use a self-hosted runner</h3><blockquote><p>Where you bring your own VM‚Äôs with static ip‚Äôs and whitelist these static ip‚Äôs</p></blockquote><p><strong>Pros:</strong></p><ul><li>Full control over your devops agents</li><li>Can optimize&#x2F;reuse these agents for various CI&#x2F;CD workloads for your cloud and on-prem deployments</li></ul><p><strong>Cons:</strong></p><ul><li>You have to provision and maintain your own VM‚Äôs, there will be time and effort required for this</li><li>Extra costs to maintain your own VM(s), although this could be optimized by turning them off after hours etc</li><li>You miss out on the free GitHub Action minutes you get</li><li>Extra work of provisioning VM‚Äôs, installing all the tooling for builds, maintaining and paying for them</li></ul><h3 id="2-Do-some-extra-steps-in-the-existing-GitHub-Actions"><a href="#2-Do-some-extra-steps-in-the-existing-GitHub-Actions" class="headerlink" title="2. Do some extra steps in the existing GitHub Actions"></a>2. Do some extra steps in the existing GitHub Actions</h3><blockquote><ol><li>Use the Azure CLI</li><li>Do an az login</li><li>Grab the public ip of the GitHub runner, you could use a simple public api like the <a href="https://api.ipify.org/">ipify api</a> to grab the public ip of the Github Runner</li><li>Use az cli to update ip restriction to add this additional ip</li><li>Do-your-normal-Deployment</li><li>Use az cli to remove the ip added in step 4</li></ol></blockquote><p><strong>Pros:</strong></p><ul><li>You use the same GitHub runner and workflow</li><li>No effort in provisioning or maintaining extra virtual machines yourself</li><li>Little bit of extra code is all that is needed</li></ul><p><strong>Cons:</strong></p><ul><li>There is a possibility that the GitHub action runner fails&#x2F;crashes after doing step 4 but before it had a chance to get to step 5, you could be left with an extra ip address white listed in your app until you run the workflow again.</li></ul><p>This post is all about how to go about doing option 2 (do some extra steps in the existing GitHub Actions), although there is one con (ie: the GitHub runner crashing during step 5 and leaving an ip address of the runner there), in my view this is a very small risk.  The chances of a crash precisely at that point are low and even it does happen the risk of having the runner ip (only 1 extra ip) for a short duration until your next run happens is very low.</p><h2 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h2><p>If you want to skip and just get to the code:</p><ul><li><a href="https://github.com/Ricky-G/github-cicd-samples/tree/main/functionapp">Here is the sample hello world function app (written in .net 6)</a></li><li><a href="https://github.com/Ricky-G/github-cicd-samples/blob/main/.github/workflows/azure-function-app-deploy.yml">Here is the GitHub Action that is deploying to ip restricted app</a></li></ul><p>In the above GitHub Action it is deploying a hello world function app; it is doing a dotnet build, package and deploy.  Those are all the standard bits of deploying a function app; lets go over the interesting bits</p><ol><li>Getting the GitHub Runners public ip</li><li>Whitelisting this ip</li><li>After a successful deploy of our app, we remove the ip added in step 2</li></ol><blockquote><p>For the first step we are using a public package <a href="https://github.com/marketplace/actions/public-ip">haythem&#x2F;public-ip@v1.2</a> to get the ip.  We can also manually do a curl our &gt;selves to the <a href="https://api.ipify.org/">ipify api</a> and grab the public ip ourselves. For the purposes of this demo we will use this package.</p></blockquote><p><strong>Step 1 - getting the GitHub runners public ip</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Public</span> <span class="string">IP</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">ip</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">haythem/public-ip@v1.2</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>Next for the second step we use the az cli to add the ip address.</li><li>First we use az webapp config to set the ‚Äìuse-same-restrictions-for-scm-site false, here we are saying don‚Äôt apply the same restriction as the main site to the scm site</li><li>Our main site is still safe with the right ip restrictions, our scm site is now ready for changes</li><li>Next we use az functionapp config access-restriction to add the GitHub runner ip to just the scm site</li></ul></blockquote><p><strong>Step 2 - white listing the GitHub runner‚Äôs public ip</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Allow Github Runner IpAddress&#x27;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">azure/CLI@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">azcliversion:</span> <span class="number">2.37</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">inlineScript:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        az webapp config access-restriction set -g $ -n func-app-iprest-demo --use-same-restrictions-for-scm-site false</span></span><br><span class="line"><span class="string">        az functionapp config access-restriction add -g $ -n func-app-iprest-demo --rule-name github_runner --action Allow --ip-address $ --priority 100 --scm-site true</span></span><br></pre></td></tr></table></figure><blockquote><p>Finally we remove the ip address we added from the previous step and set the scm site access the same as our main site</p></blockquote><p><strong>Step 3 - after successful deploy, remove the GitHub runner‚Äôs public ip</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Remove Github Runner IpAddress&#x27;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">azure/CLI@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">azcliversion:</span> <span class="number">2.37</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">inlineScript:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        az functionapp config access-restriction remove -g $ -n func-app-iprest-demo --rule-name github_runner --scm-site true</span></span><br><span class="line"><span class="string">        az webapp config access-restriction set -g $ -n func-app-iprest-demo --use-same-restrictions-for-scm-site true</span></span><br></pre></td></tr></table></figure><p>Finally üëè! we can now deploy using GitHub Actions to ip restricted function apps üôå.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>As always a big thank you to <a href="https://unsplash.com/">Unsplash</a> for providing a huge range of images for free</p><ul><li>Cover image has been taken from <a href="https://unsplash.com/photos/842ofHC6MaI">https://unsplash.com/photos/842ofHC6MaI</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Dynamic IP Management for CI&amp;#x2F;CD to Secured Azure Functions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IP-restricted Function Apps block GitHub Actions runners causing HTTP 403 deployment failures since runners use dynamic IP addresses. Problem: Cannot whitelist entire GitHub IP range due to frequent changes. Solution: Dynamic IP management in GitHub Actions workflow using Azure CLI to temporarily add runner IP to SCM site access restrictions, deploy code, then remove IP. Implementation uses &lt;code&gt;ipify&lt;/code&gt; API for IP detection, &lt;code&gt;--use-same-restrictions-for-scm-site false&lt;/code&gt; for SCM isolation, and automated cleanup to maintain security posture.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;a href=&quot;/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/&quot; title=&quot;Securing Azure Functions and Logic Apps&quot;&gt;In the previous post we blocked our function app to be available only to the APIM via ip restrictions&lt;/a&gt;. 

&lt;p&gt;This secures our function app and it isn‚Äôt available publicly, any one that tries to access our function app url will get ‚ÄúHTTP 403 Forbidden‚Äù.&lt;/p&gt;
&lt;p&gt;This secures our function app; now what about deploying code changes to the function app via GitHub Actions? we should be able to CI&amp;#x2F;CD to our function app, but there is a problem here. The GitHub action will fail with the same ‚ÄúHTTP 403 Forbidden‚Äù, this is because GitHub actions run on runners (its a hosted virtual environment), each time we run the Action we get a new runner and it can have a different ip address.  So how can we get around this? &lt;a href=&quot;https://api.github.com/meta&quot;&gt;do we white list the entire GitHub ip range?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub‚Äôs ip ranges can change any time, so will have to keep scanning for changes to these ranges and proactively update our ip restrictions, this is not very scalable or practical. So what are other ways of getting around this? we have a couple of ways to get around this.&lt;/p&gt;
&lt;h2 id=&quot;Possible-Solutions&quot;&gt;&lt;a href=&quot;#Possible-Solutions&quot; class=&quot;headerlink&quot; title=&quot;Possible Solutions&quot;&gt;&lt;/a&gt;Possible Solutions&lt;/h2&gt;&lt;p&gt;There are two viable solutions here&lt;/p&gt;</summary>
    
    
    
    <category term="GitHub" scheme="https://clouddev.blog/categories/GitHub/"/>
    
    <category term="Actions" scheme="https://clouddev.blog/categories/GitHub/Actions/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="Function Apps" scheme="https://clouddev.blog/tags/Function-Apps/"/>
    
    <category term="Azure App Service" scheme="https://clouddev.blog/tags/Azure-App-Service/"/>
    
    <category term="GitHub" scheme="https://clouddev.blog/tags/GitHub/"/>
    
    <category term="CI/CD" scheme="https://clouddev.blog/tags/CI-CD/"/>
    
    <category term="Security" scheme="https://clouddev.blog/tags/Security/"/>
    
    <category term="IP Restrictions" scheme="https://clouddev.blog/tags/IP-Restrictions/"/>
    
    <category term="Serverless" scheme="https://clouddev.blog/tags/Serverless/"/>
    
  </entry>
  
  <entry>
    <title>Securing Azure Functions and Logic Apps</title>
    <link href="https://clouddev.blog/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/"/>
    <id>https://clouddev.blog/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/</id>
    <published>2022-07-31T12:00:00.000Z</published>
    <updated>2025-08-07T05:42:25.055Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>üéØ TL;DR: Cost-Optimized Security for Serverless Microservices</strong></p><p>Consumption plan Function Apps and APIM Standard lack VNet integration for cost optimization but expose services publicly. Problem: Serverless microservices accessible directly bypassing API Management security policies. Solution: IP restriction-based security using APIM‚Äôs public IP address to whitelist only API Management access, configuring both main site and SCM site restrictions. Architecture includes Azure Front Door for WAF capabilities since APIM Standard lacks native WAF protection.</p></blockquote><hr><p>Here is a scenario that I recently encountered. Imagine we are building micro-services using serverless (a mix on Azure Function Apps and Logic Apps) with APIM in the front.  Lets say we went with the APIM standard instance and all the logic and function apps are going to be running on consumption plan (for cost reasons as its cheaper).  This means we wont be getting any vnet capability and our function and logic apps will be exposed out to the world (remember to get vnet with APIM we have to go with the premium version, we are going APIM standard here for cost saving reasons).</p><p>So how do we restrict our function and logic apps to only go through the APIM, in another words all our function and logic apps <strong>must only</strong> go through the APIM and if anyone tries to access them directly they should be getting a ‚ÄúHTTP 403 Forbidden‚Äù.</p><p>Lets visualize this scenario; We have some WAF capable ingress endpoint, in this case its Azure Front Door, that is forwarding traffic to APIM which then sends the requests to the serverless apps.<br>Reason for having Front Door before APIM is because APIM doesn‚Äôt have WAF natively so we <a href="https://docs.microsoft.com/en-us/security/benchmark/azure/baselines/api-management-security-baseline#ns-6-deploy-web-application-firewall">will need to put something in front of it that has that capability to be secure</a>. </p><p><a href="https://docs.microsoft.com/en-us/security/benchmark/azure/baselines/api-management-security-baseline#ns-6-deploy-web-application-firewall">There are few options like Azure Firewall, Application Gateway etc</a>, but for the purposes of this scenario we have Azure Front Door in front of APIM (and we can have an APIM policy that will only accept traffic from Azure Font Door, we wont be going in to that, we will keep it to securing our function apps to just being available via APIM for today)</p><p><img src="/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/apim-azure-functions-backend.png" alt=" " title="Sample Scenario"></p><span id="more"></span><h2 id="Securing-the-function-app"><a href="#Securing-the-function-app" class="headerlink" title="Securing the function app"></a>Securing the function app</h2><ol><li>First we will need to get the public ip address of the APIM</li><li>White-list this address in our function app network restrictions</li></ol><h2 id="Getting-the-public-ip-of-APIM"><a href="#Getting-the-public-ip-of-APIM" class="headerlink" title="Getting the public ip of APIM"></a>Getting the public ip of APIM</h2><p>You can go to the APIM resource in the Azure portal and get it from there<br><img src="/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/apim-public-ip.png" alt=" " title="APIM ip address"></p><p>Or you can use the CLI and run </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az apim show --name &quot;apim-name&quot; --resource-group &quot;resource-group-name&quot;</span><br></pre></td></tr></table></figure><h2 id="White-listing-the-function-app"><a href="#White-listing-the-function-app" class="headerlink" title="White-listing the function app"></a>White-listing the function app</h2><ol><li>You need to go into networking -&gt; access restriction</li><li>Only allow the APIM ip (once you enter this, the deny all will automatically come ie: all other ip‚Äôs are denied)</li><li>Its important that the SCM site is also blocked. <a href="https://docs.microsoft.com/en-us/azure/app-service/resources-kudu">More about Kudu service that powers the SCM site here</a></li></ol><p><img src="/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/func-ip-restriction-1.png" alt=" " title="Function app ip restrictions"></p><p><img src="/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/func-ip-restriction-2.png" alt=" " title="Function app block all ips except APIM"></p><p><img src="/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/func-ip-restriction-3.png" alt=" " title="Make sure to block the SCM site also"></p><h2 id="What-happens-if-you-try-to-access-this-function"><a href="#What-happens-if-you-try-to-access-this-function" class="headerlink" title="What happens if you try to access this function"></a>What happens if you try to access this function</h2><p>Now its all blocked we get a nice HTTP 403 Forbidden</p><p><img src="/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/func-ip-restriction-4.png" alt=" " title="Make sure to block the SCM site also"></p><h2 id="What-about-deploying-code-to-this-function-via-GitHub-Actions"><a href="#What-about-deploying-code-to-this-function-via-GitHub-Actions" class="headerlink" title="What about deploying code to this function via GitHub Actions"></a>What about deploying code to this function via GitHub Actions</h2><p>When you try to deploy to these functions using GitHub Actions or even via Azure Devops you will get the same HTTP 403 and wont be able to deploy.  This is because the GitHub runner‚Äôs ip address will be blocked; remember we are only allowing APIM in, all others are blocked.</p><p>There are a couple of ways to get around this. <a href="/GitHub/Actions/deploying-to-ip-restricted-azure-function-apps-using-github-actions/" title="Deploying To IP Restricted Azure Function Apps Using GitHub Actions">I talk about this in the next post, you can check it out here</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Cover image has been taken from <a href="https://azure.microsoft.com/en-us/services/functions/#overview">https://azure.microsoft.com/en-us/services/functions/#overview</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üéØ TL;DR: Cost-Optimized Security for Serverless Microservices&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consumption plan Function Apps and APIM Standard lack VNet integration for cost optimization but expose services publicly. Problem: Serverless microservices accessible directly bypassing API Management security policies. Solution: IP restriction-based security using APIM‚Äôs public IP address to whitelist only API Management access, configuring both main site and SCM site restrictions. Architecture includes Azure Front Door for WAF capabilities since APIM Standard lacks native WAF protection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Here is a scenario that I recently encountered. Imagine we are building micro-services using serverless (a mix on Azure Function Apps and Logic Apps) with APIM in the front.  Lets say we went with the APIM standard instance and all the logic and function apps are going to be running on consumption plan (for cost reasons as its cheaper).  This means we wont be getting any vnet capability and our function and logic apps will be exposed out to the world (remember to get vnet with APIM we have to go with the premium version, we are going APIM standard here for cost saving reasons).&lt;/p&gt;
&lt;p&gt;So how do we restrict our function and logic apps to only go through the APIM, in another words all our function and logic apps &lt;strong&gt;must only&lt;/strong&gt; go through the APIM and if anyone tries to access them directly they should be getting a ‚ÄúHTTP 403 Forbidden‚Äù.&lt;/p&gt;
&lt;p&gt;Lets visualize this scenario; We have some WAF capable ingress endpoint, in this case its Azure Front Door, that is forwarding traffic to APIM which then sends the requests to the serverless apps.&lt;br&gt;Reason for having Front Door before APIM is because APIM doesn‚Äôt have WAF natively so we &lt;a href=&quot;https://docs.microsoft.com/en-us/security/benchmark/azure/baselines/api-management-security-baseline#ns-6-deploy-web-application-firewall&quot;&gt;will need to put something in front of it that has that capability to be secure&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/security/benchmark/azure/baselines/api-management-security-baseline#ns-6-deploy-web-application-firewall&quot;&gt;There are few options like Azure Firewall, Application Gateway etc&lt;/a&gt;, but for the purposes of this scenario we have Azure Front Door in front of APIM (and we can have an APIM policy that will only accept traffic from Azure Font Door, we wont be going in to that, we will keep it to securing our function apps to just being available via APIM for today)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Azure/Function-Apps/Security/securing-azure-functions-and-logic-apps/apim-azure-functions-backend.png&quot; alt=&quot; &quot; title=&quot;Sample Scenario&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Azure" scheme="https://clouddev.blog/categories/Azure/"/>
    
    <category term="Function Apps" scheme="https://clouddev.blog/categories/Azure/Function-Apps/"/>
    
    <category term="Security" scheme="https://clouddev.blog/categories/Azure/Function-Apps/Security/"/>
    
    
    <category term="Azure" scheme="https://clouddev.blog/tags/Azure/"/>
    
    <category term="Function Apps" scheme="https://clouddev.blog/tags/Function-Apps/"/>
    
    <category term="Azure App Service" scheme="https://clouddev.blog/tags/Azure-App-Service/"/>
    
    <category term="GitHub" scheme="https://clouddev.blog/tags/GitHub/"/>
    
    <category term="CI/CD" scheme="https://clouddev.blog/tags/CI-CD/"/>
    
    <category term="Security" scheme="https://clouddev.blog/tags/Security/"/>
    
    <category term="IP Restrictions" scheme="https://clouddev.blog/tags/IP-Restrictions/"/>
    
    <category term="Serverless" scheme="https://clouddev.blog/tags/Serverless/"/>
    
  </entry>
  
  <entry>
    <title>Hello World üëã</title>
    <link href="https://clouddev.blog/Blog/hello-world-%F0%9F%91%8B/"/>
    <id>https://clouddev.blog/Blog/hello-world-%F0%9F%91%8B/</id>
    <published>2022-07-26T12:00:00.000Z</published>
    <updated>2025-01-12T23:24:52.009Z</updated>
    
    <content type="html"><![CDATA[<p>After sitting on this for a long time and wanting to blog &#x2F; write down my thoughts, I‚Äôve finally got my act together and started this. There were so many times I was asked some very good questions which I am sure not just the person asking me but a lot more would have been interested in knowing the answer&#x2F;solution&#x2F;thoughts around the matter.  This is a way to write about that and help the wider community who are searching for similar solutions.</p><p>I regularly answer in Stack Overflow and in some cases I wrote a question and answered it myself just incase some one was looking for something similar, that wasn‚Äôt really the ideal platform to do that. There have been so many times that going through and reading other people‚Äôs blogs have helped me and unlocked me in problems that I was stuck with; this is a in a way trying to give back to the community and helping people that are on the look out for a solution for a similar problem.</p><h1 id="How-to-power-the-blog"><a href="#How-to-power-the-blog" class="headerlink" title="How to power the blog"></a>How to power the blog</h1><p>There were so many choices out there when it came to what frameworks and libraries to use to build the blog and what to use to host the blog.</p><h2 id="My-requirements-when-it-came-to-building-were-simple"><a href="#My-requirements-when-it-came-to-building-were-simple" class="headerlink" title="My requirements when it came to building were simple"></a>My requirements when it came to building were simple</h2><ul><li>Easy to author posts</li><li>Easy to build</li><li>Easy to maintain</li><li>Most customizations (eg: search, ads, tags, categories etc) should come out of the box</li></ul><h2 id="My-requirements-when-it-came-to-hosting-were-even-simpler"><a href="#My-requirements-when-it-came-to-hosting-were-even-simpler" class="headerlink" title="My requirements when it came to hosting were even simpler"></a>My requirements when it came to hosting were even simpler</h2><ul><li>Has to be free</li><li>Has to be able to handle ‚Äòsome‚Äô level of load</li><li>Easy to CI&#x2F;CD</li></ul><span id="more"></span><h2 id="Main-choices-here-boiled-down-to"><a href="#Main-choices-here-boiled-down-to" class="headerlink" title="Main choices here boiled down to:"></a>Main choices here boiled down to:</h2><ul><li><a href="https://github.com/OrchardCMS/OrchardCore">Orchard CMS</a></li><li><a href="https://github.com/gohugoio/hugo">Hugo</a></li><li><a href="https://github.com/TryGhost/Ghost">Ghost</a></li><li><a href="https://jekyllrb.com/docs/github-pages/">Jekyll With Github Pages</a></li><li><a href="https://github.com/hexojs/hexo">Hexo</a></li></ul><p>All the options were good, I really liked Hugo, it was so easy to create a site. But all of them were geared towards creating a CMS &#x2F; generic site.  I was looking for something that had all the things needed for a blog out of the box with out having to grab lots of plugins or write something custom.</p><p>Jekyll and GitHub pages were really good, it nailed most of the things, but I didn‚Äôt really want to go down the road of learning Jekyll just to host a blog. This left one and Hexo fit my requirements beautifully. It was a dedicated Javascript framework that has all the things I was looking for out of the box and it had <a href="https://hexo.io/themes/">360+ themes available all community built and free</a>.</p><p>One thing I loved about Hexo is the fact its builds the source to a static site and you can use GitHub to host the static site and use <a href="https://hexo.io/docs/github-pages">GitHub Actions</a> to build the static site from source.</p><p>This is what I went with in the end, Hexo to build the blog.  I write everything in markdown files and Hexo builds it out into a nice static site and I host it using <a href="https://github.com/Ricky-G/ricky-g.github.io">GitHub pages as a public repo</a></p><p>There are some <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#usage-limits">limits of hosting with GitHub Pages</a>, the main one is the 100GB of bandwidth as a soft limit.  Since this is just a static site 100GB should be plenty but if and when it comes to that I will look at putting a CDN in front.</p><h1 id="Final-Result"><a href="#Final-Result" class="headerlink" title="Final Result"></a>Final Result</h1><ul><li><a href="https://github.com/hexojs/hexo">Hexo</a> to build the blog into a static site</li><li><a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a> theme</li><li><a href="https://pages.github.com/">GitHub Pages</a> to host the site</li><li><a href="https://bulma.io/">Bulma</a> to help enrich the markdown files with styling</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>As always a big thank you to <a href="https://unsplash.com/">Unsplash</a> for providing a huge range of images for free</p><ul><li>Cover image has been taken from <a href="https://unsplash.com/photos/3SIXZisims4">https://unsplash.com/photos/3SIXZisims4</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;After sitting on this for a long time and wanting to blog &amp;#x2F; write down my thoughts, I‚Äôve finally got my act together and started this. There were so many times I was asked some very good questions which I am sure not just the person asking me but a lot more would have been interested in knowing the answer&amp;#x2F;solution&amp;#x2F;thoughts around the matter.  This is a way to write about that and help the wider community who are searching for similar solutions.&lt;/p&gt;
&lt;p&gt;I regularly answer in Stack Overflow and in some cases I wrote a question and answered it myself just incase some one was looking for something similar, that wasn‚Äôt really the ideal platform to do that. There have been so many times that going through and reading other people‚Äôs blogs have helped me and unlocked me in problems that I was stuck with; this is a in a way trying to give back to the community and helping people that are on the look out for a solution for a similar problem.&lt;/p&gt;
&lt;h1 id=&quot;How-to-power-the-blog&quot;&gt;&lt;a href=&quot;#How-to-power-the-blog&quot; class=&quot;headerlink&quot; title=&quot;How to power the blog&quot;&gt;&lt;/a&gt;How to power the blog&lt;/h1&gt;&lt;p&gt;There were so many choices out there when it came to what frameworks and libraries to use to build the blog and what to use to host the blog.&lt;/p&gt;
&lt;h2 id=&quot;My-requirements-when-it-came-to-building-were-simple&quot;&gt;&lt;a href=&quot;#My-requirements-when-it-came-to-building-were-simple&quot; class=&quot;headerlink&quot; title=&quot;My requirements when it came to building were simple&quot;&gt;&lt;/a&gt;My requirements when it came to building were simple&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Easy to author posts&lt;/li&gt;
&lt;li&gt;Easy to build&lt;/li&gt;
&lt;li&gt;Easy to maintain&lt;/li&gt;
&lt;li&gt;Most customizations (eg: search, ads, tags, categories etc) should come out of the box&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;My-requirements-when-it-came-to-hosting-were-even-simpler&quot;&gt;&lt;a href=&quot;#My-requirements-when-it-came-to-hosting-were-even-simpler&quot; class=&quot;headerlink&quot; title=&quot;My requirements when it came to hosting were even simpler&quot;&gt;&lt;/a&gt;My requirements when it came to hosting were even simpler&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Has to be free&lt;/li&gt;
&lt;li&gt;Has to be able to handle ‚Äòsome‚Äô level of load&lt;/li&gt;
&lt;li&gt;Easy to CI&amp;#x2F;CD&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://clouddev.blog/categories/Blog/"/>
    
    
    <category term="Hexo" scheme="https://clouddev.blog/tags/Hexo/"/>
    
    <category term="Personal" scheme="https://clouddev.blog/tags/Personal/"/>
    
    <category term="Blog" scheme="https://clouddev.blog/tags/Blog/"/>
    
  </entry>
  
</feed>
